// Package catalog20201201 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package catalog20201201

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Defines values for ItemImageVariant.
const (
	ItemImageVariantMAIN ItemImageVariant = "MAIN"

	ItemImageVariantPT01 ItemImageVariant = "PT01"

	ItemImageVariantPT02 ItemImageVariant = "PT02"

	ItemImageVariantPT03 ItemImageVariant = "PT03"

	ItemImageVariantPT04 ItemImageVariant = "PT04"

	ItemImageVariantPT05 ItemImageVariant = "PT05"

	ItemImageVariantPT06 ItemImageVariant = "PT06"

	ItemImageVariantPT07 ItemImageVariant = "PT07"

	ItemImageVariantPT08 ItemImageVariant = "PT08"

	ItemImageVariantSWCH ItemImageVariant = "SWCH"
)

// Defines values for ItemVariationsByMarketplaceVariationType.
const (
	ItemVariationsByMarketplaceVariationTypeCHILD ItemVariationsByMarketplaceVariationType = "CHILD"

	ItemVariationsByMarketplaceVariationTypePARENT ItemVariationsByMarketplaceVariationType = "PARENT"
)

// Defines values for ItemVendorDetailsByMarketplaceReplenishmentCategory.
const (
	ItemVendorDetailsByMarketplaceReplenishmentCategoryALLOCATED ItemVendorDetailsByMarketplaceReplenishmentCategory = "ALLOCATED"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryBASICREPLENISHMENT ItemVendorDetailsByMarketplaceReplenishmentCategory = "BASIC_REPLENISHMENT"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryINSEASON ItemVendorDetailsByMarketplaceReplenishmentCategory = "IN_SEASON"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryLIMITEDREPLENISHMENT ItemVendorDetailsByMarketplaceReplenishmentCategory = "LIMITED_REPLENISHMENT"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryMANUFACTUREROUTOFSTOCK ItemVendorDetailsByMarketplaceReplenishmentCategory = "MANUFACTURER_OUT_OF_STOCK"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryNEWPRODUCT ItemVendorDetailsByMarketplaceReplenishmentCategory = "NEW_PRODUCT"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryNONREPLENISHABLE ItemVendorDetailsByMarketplaceReplenishmentCategory = "NON_REPLENISHABLE"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryNONSTOCKUPABLE ItemVendorDetailsByMarketplaceReplenishmentCategory = "NON_STOCKUPABLE"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryOBSOLETE ItemVendorDetailsByMarketplaceReplenishmentCategory = "OBSOLETE"

	ItemVendorDetailsByMarketplaceReplenishmentCategoryPLANNEDREPLENISHMENT ItemVendorDetailsByMarketplaceReplenishmentCategory = "PLANNED_REPLENISHMENT"
)

// Description of a brand that can be used to get more fine-grained search results.
type BrandRefinement struct {

	// Brand name. For display and can be used as a search refinement.
	BrandName string `json:"brandName"`

	// The estimated number of results that would still be returned if refinement key applied.
	NumberOfResults int `json:"numberOfResults"`
}

// Description of a classification that can be used to get more fine-grained search results.
type ClassificationRefinement struct {

	// Identifier for the classification that can be used for search refinement purposes.
	ClassificationId string `json:"classificationId"`

	// Display name for the classification.
	DisplayName string `json:"displayName"`

	// The estimated number of results that would still be returned if refinement key applied.
	NumberOfResults int `json:"numberOfResults"`
}

// Error response returned when the request is unsuccessful.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// A list of error responses returned when a request is unsuccessful.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// An item in the Amazon catalog.
type Item struct {

	// Amazon Standard Identification Number (ASIN) is the unique identifier for an item in the Amazon catalog.
	Asin ItemAsin `json:"asin"`

	// A JSON object that contains structured item attribute data keyed by attribute name. Catalog item attributes are available only to brand owners and conform to the related product type definitions available in the Selling Partner API for Product Type Definitions.
	Attributes *ItemAttributes `json:"attributes,omitempty"`

	// Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers.
	Identifiers *ItemIdentifiers `json:"identifiers,omitempty"`

	// Images for an item in the Amazon catalog. All image variants are provided to brand owners. Otherwise, a thumbnail of the "MAIN" image variant is provided.
	Images *ItemImages `json:"images,omitempty"`

	// Product types associated with the Amazon catalog item.
	ProductTypes *ItemProductTypes `json:"productTypes,omitempty"`

	// Sales ranks of an Amazon catalog item.
	SalesRanks *ItemSalesRanks `json:"salesRanks,omitempty"`

	// Summary details of an Amazon catalog item.
	Summaries *ItemSummaries `json:"summaries,omitempty"`

	// Variation details by marketplace for an Amazon catalog item (variation relationships).
	Variations *ItemVariations `json:"variations,omitempty"`

	// Vendor details associated with an Amazon catalog item. Vendor details are available to vendors only.
	VendorDetails *ItemVendorDetails `json:"vendorDetails,omitempty"`
}

// Amazon Standard Identification Number (ASIN) is the unique identifier for an item in the Amazon catalog.
type ItemAsin string

// A JSON object that contains structured item attribute data keyed by attribute name. Catalog item attributes are available only to brand owners and conform to the related product type definitions available in the Selling Partner API for Product Type Definitions.
type ItemAttributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier.
type ItemIdentifier struct {

	// Identifier.
	Identifier string `json:"identifier"`

	// Type of identifier, such as UPC, EAN, or ISBN.
	IdentifierType string `json:"identifierType"`
}

// Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers.
type ItemIdentifiers []ItemIdentifiersByMarketplace

// Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace.
type ItemIdentifiersByMarketplace struct {

	// Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace.
	Identifiers []ItemIdentifier `json:"identifiers"`

	// Amazon marketplace identifier.
	MarketplaceId string `json:"marketplaceId"`
}

// Image for an item in the Amazon catalog.
type ItemImage struct {

	// Height of the image in pixels.
	Height int `json:"height"`

	// Link, or URL, for the image.
	Link string `json:"link"`

	// Variant of the image, such as MAIN or PT01.
	Variant ItemImageVariant `json:"variant"`

	// Width of the image in pixels.
	Width int `json:"width"`
}

// Variant of the image, such as MAIN or PT01.
type ItemImageVariant string

// Images for an item in the Amazon catalog. All image variants are provided to brand owners. Otherwise, a thumbnail of the "MAIN" image variant is provided.
type ItemImages []ItemImagesByMarketplace

// Images for an item in the Amazon catalog for the indicated Amazon marketplace.
type ItemImagesByMarketplace struct {

	// Images for an item in the Amazon catalog for the indicated Amazon marketplace.
	Images []ItemImage `json:"images"`

	// Amazon marketplace identifier.
	MarketplaceId string `json:"marketplaceId"`
}

// Product type associated with the Amazon catalog item for the indicated Amazon marketplace.
type ItemProductTypeByMarketplace struct {

	// Amazon marketplace identifier.
	MarketplaceId *string `json:"marketplaceId,omitempty"`

	// Name of the product type associated with the Amazon catalog item.
	ProductType *string `json:"productType,omitempty"`
}

// Product types associated with the Amazon catalog item.
type ItemProductTypes []ItemProductTypeByMarketplace

// Sales rank of an Amazon catalog item.
type ItemSalesRank struct {

	// Corresponding Amazon retail website link, or URL, for the sales rank.
	Link *string `json:"link,omitempty"`

	// Sales rank value.
	Rank int `json:"rank"`

	// Title, or name, of the sales rank.
	Title string `json:"title"`
}

// Sales ranks of an Amazon catalog item.
type ItemSalesRanks []ItemSalesRanksByMarketplace

// Sales ranks of an Amazon catalog item for the indicated Amazon marketplace.
type ItemSalesRanksByMarketplace struct {

	// Amazon marketplace identifier.
	MarketplaceId string `json:"marketplaceId"`

	// Sales ranks of an Amazon catalog item for an Amazon marketplace.
	Ranks []ItemSalesRank `json:"ranks"`
}

// Items in the Amazon catalog and search related metadata.
type ItemSearchResults struct {

	// A list of items from the Amazon catalog.
	Items []Item `json:"items"`

	// The estimated total number of products matched by the search query (only results up to the page count limit will be returned per request regardless of the number found).
	//
	// Note: The maximum number of items (ASINs) that can be returned and paged through is 1000.
	NumberOfResults int `json:"numberOfResults"`

	// When a request produces a response that exceeds the pageSize, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the nextToken value or the previousToken value as the pageToken parameter in the next request. When you receive the last page, there will be no nextToken key in the pagination object.
	Pagination Pagination `json:"pagination"`

	// Search refinements.
	Refinements Refinements `json:"refinements"`
}

// Summary details of an Amazon catalog item.
type ItemSummaries []ItemSummaryByMarketplace

// Summary details of an Amazon catalog item for the indicated Amazon marketplace.
type ItemSummaryByMarketplace struct {

	// Name of the brand associated with an Amazon catalog item.
	BrandName *string `json:"brandName,omitempty"`

	// Identifier of the browse node associated with an Amazon catalog item.
	BrowseNode *string `json:"browseNode,omitempty"`

	// Name of the color associated with an Amazon catalog item.
	ColorName *string `json:"colorName,omitempty"`

	// Name, or title, associated with an Amazon catalog item.
	ItemName *string `json:"itemName,omitempty"`

	// Name of the manufacturer associated with an Amazon catalog item.
	Manufacturer *string `json:"manufacturer,omitempty"`

	// Amazon marketplace identifier.
	MarketplaceId string `json:"marketplaceId"`

	// Model number associated with an Amazon catalog item.
	ModelNumber *string `json:"modelNumber,omitempty"`

	// Name of the size associated with an Amazon catalog item.
	SizeName *string `json:"sizeName,omitempty"`

	// Name of the style associated with an Amazon catalog item.
	StyleName *string `json:"styleName,omitempty"`
}

// Variation details by marketplace for an Amazon catalog item (variation relationships).
type ItemVariations []ItemVariationsByMarketplace

// Variation details for the Amazon catalog item for the indicated Amazon marketplace.
type ItemVariationsByMarketplace struct {

	// Identifiers (ASINs) of the related items.
	Asins []string `json:"asins"`

	// Amazon marketplace identifier.
	MarketplaceId string `json:"marketplaceId"`

	// Type of variation relationship of the Amazon catalog item in the request to the related item(s): "PARENT" or "CHILD".
	VariationType ItemVariationsByMarketplaceVariationType `json:"variationType"`
}

// Type of variation relationship of the Amazon catalog item in the request to the related item(s): "PARENT" or "CHILD".
type ItemVariationsByMarketplaceVariationType string

// Vendor details associated with an Amazon catalog item. Vendor details are available to vendors only.
type ItemVendorDetails []ItemVendorDetailsByMarketplace

// Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace.
type ItemVendorDetailsByMarketplace struct {

	// Brand code associated with an Amazon catalog item.
	BrandCode *string `json:"brandCode,omitempty"`

	// Product category associated with an Amazon catalog item.
	CategoryCode *string `json:"categoryCode,omitempty"`

	// Manufacturer code associated with an Amazon catalog item.
	ManufacturerCode *string `json:"manufacturerCode,omitempty"`

	// Parent vendor code of the manufacturer code.
	ManufacturerCodeParent *string `json:"manufacturerCodeParent,omitempty"`

	// Amazon marketplace identifier.
	MarketplaceId string `json:"marketplaceId"`

	// Product group associated with an Amazon catalog item.
	ProductGroup *string `json:"productGroup,omitempty"`

	// Replenishment category associated with an Amazon catalog item.
	ReplenishmentCategory *ItemVendorDetailsByMarketplaceReplenishmentCategory `json:"replenishmentCategory,omitempty"`

	// Product subcategory associated with an Amazon catalog item.
	SubcategoryCode *string `json:"subcategoryCode,omitempty"`
}

// Replenishment category associated with an Amazon catalog item.
type ItemVendorDetailsByMarketplaceReplenishmentCategory string

// When a request produces a response that exceeds the pageSize, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the nextToken value or the previousToken value as the pageToken parameter in the next request. When you receive the last page, there will be no nextToken key in the pagination object.
type Pagination struct {

	// A token that can be used to fetch the next page.
	NextToken *string `json:"nextToken,omitempty"`

	// A token that can be used to fetch the previous page.
	PreviousToken *string `json:"previousToken,omitempty"`
}

// Search refinements.
type Refinements struct {

	// Brand search refinements.
	Brands []BrandRefinement `json:"brands"`

	// Classification search refinements.
	Classifications []ClassificationRefinement `json:"classifications"`
}

// SearchCatalogItemsParams defines parameters for SearchCatalogItems.
type SearchCatalogItemsParams struct {

	// A comma-delimited list of words or item identifiers to search the Amazon catalog for.
	Keywords []string `json:"keywords"`

	// A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `json:"marketplaceIds"`

	// A comma-delimited list of data sets to include in the response. Default: summaries.
	IncludedData *[]SearchCatalogItemsParamsIncludedData `json:"includedData,omitempty"`

	// A comma-delimited list of brand names to limit the search to.
	BrandNames *[]string `json:"brandNames,omitempty"`

	// A comma-delimited list of classification identifiers to limit the search to.
	ClassificationIds *[]string `json:"classificationIds,omitempty"`

	// Number of results to be returned per page.
	PageSize *int `json:"pageSize,omitempty"`

	// A token to fetch a certain page when there are multiple pages worth of results.
	PageToken *string `json:"pageToken,omitempty"`

	// The language the keywords are provided in. Defaults to the primary locale of the marketplace.
	KeywordsLocale *string `json:"keywordsLocale,omitempty"`

	// Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
	Locale *string `json:"locale,omitempty"`
}

// SearchCatalogItemsParamsIncludedData defines parameters for SearchCatalogItems.
type SearchCatalogItemsParamsIncludedData string

// GetCatalogItemParams defines parameters for GetCatalogItem.
type GetCatalogItemParams struct {

	// A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
	MarketplaceIds []string `json:"marketplaceIds"`

	// A comma-delimited list of data sets to include in the response. Default: summaries.
	IncludedData *[]GetCatalogItemParamsIncludedData `json:"includedData,omitempty"`

	// Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
	Locale *string `json:"locale,omitempty"`
}

// GetCatalogItemParamsIncludedData defines parameters for GetCatalogItem.
type GetCatalogItemParamsIncludedData string

// Getter for additional properties for ItemAttributes. Returns the specified
// element and whether it was found
func (a ItemAttributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ItemAttributes
func (a *ItemAttributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ItemAttributes to handle AdditionalProperties
func (a *ItemAttributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ItemAttributes to handle AdditionalProperties
func (a ItemAttributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
