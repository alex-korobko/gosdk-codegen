// Package aplusContent provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package aplusContent

import (
	"time"
)

// Defines values for AsinBadge.
const (
	AsinBadgeBRANDNOTELIGIBLE AsinBadge = "BRAND_NOT_ELIGIBLE"

	AsinBadgeCATALOGNOTFOUND AsinBadge = "CATALOG_NOT_FOUND"

	AsinBadgeCONTENTNOTPUBLISHED AsinBadge = "CONTENT_NOT_PUBLISHED"

	AsinBadgeCONTENTPUBLISHED AsinBadge = "CONTENT_PUBLISHED"
)

// Defines values for ColorType.
const (
	ColorTypeDARK ColorType = "DARK"

	ColorTypeLIGHT ColorType = "LIGHT"
)

// Defines values for ContentBadge.
const (
	ContentBadgeBULK ContentBadge = "BULK"

	ContentBadgeGENERATED ContentBadge = "GENERATED"

	ContentBadgeLAUNCHPAD ContentBadge = "LAUNCHPAD"

	ContentBadgePREMIUM ContentBadge = "PREMIUM"

	ContentBadgeSTANDARD ContentBadge = "STANDARD"
)

// Defines values for ContentModuleType.
const (
	ContentModuleTypeSTANDARDCOMPANYLOGO ContentModuleType = "STANDARD_COMPANY_LOGO"

	ContentModuleTypeSTANDARDCOMPARISONTABLE ContentModuleType = "STANDARD_COMPARISON_TABLE"

	ContentModuleTypeSTANDARDFOURIMAGETEXT ContentModuleType = "STANDARD_FOUR_IMAGE_TEXT"

	ContentModuleTypeSTANDARDFOURIMAGETEXTQUADRANT ContentModuleType = "STANDARD_FOUR_IMAGE_TEXT_QUADRANT"

	ContentModuleTypeSTANDARDHEADERIMAGETEXT ContentModuleType = "STANDARD_HEADER_IMAGE_TEXT"

	ContentModuleTypeSTANDARDIMAGESIDEBAR ContentModuleType = "STANDARD_IMAGE_SIDEBAR"

	ContentModuleTypeSTANDARDIMAGETEXTOVERLAY ContentModuleType = "STANDARD_IMAGE_TEXT_OVERLAY"

	ContentModuleTypeSTANDARDMULTIPLEIMAGETEXT ContentModuleType = "STANDARD_MULTIPLE_IMAGE_TEXT"

	ContentModuleTypeSTANDARDPRODUCTDESCRIPTION ContentModuleType = "STANDARD_PRODUCT_DESCRIPTION"

	ContentModuleTypeSTANDARDSINGLEIMAGEHIGHLIGHTS ContentModuleType = "STANDARD_SINGLE_IMAGE_HIGHLIGHTS"

	ContentModuleTypeSTANDARDSINGLEIMAGESPECSDETAIL ContentModuleType = "STANDARD_SINGLE_IMAGE_SPECS_DETAIL"

	ContentModuleTypeSTANDARDSINGLESIDEIMAGE ContentModuleType = "STANDARD_SINGLE_SIDE_IMAGE"

	ContentModuleTypeSTANDARDTECHSPECS ContentModuleType = "STANDARD_TECH_SPECS"

	ContentModuleTypeSTANDARDTEXT ContentModuleType = "STANDARD_TEXT"

	ContentModuleTypeSTANDARDTHREEIMAGETEXT ContentModuleType = "STANDARD_THREE_IMAGE_TEXT"
)

// Defines values for ContentStatus.
const (
	ContentStatusAPPROVED ContentStatus = "APPROVED"

	ContentStatusDRAFT ContentStatus = "DRAFT"

	ContentStatusREJECTED ContentStatus = "REJECTED"

	ContentStatusSUBMITTED ContentStatus = "SUBMITTED"
)

// Defines values for ContentType.
const (
	ContentTypeEBC ContentType = "EBC"

	ContentTypeEMC ContentType = "EMC"
)

// Defines values for DecoratorType.
const (
	DecoratorTypeLISTITEM DecoratorType = "LIST_ITEM"

	DecoratorTypeLISTORDERED DecoratorType = "LIST_ORDERED"

	DecoratorTypeLISTUNORDERED DecoratorType = "LIST_UNORDERED"

	DecoratorTypeSTYLEBOLD DecoratorType = "STYLE_BOLD"

	DecoratorTypeSTYLEITALIC DecoratorType = "STYLE_ITALIC"

	DecoratorTypeSTYLELINEBREAK DecoratorType = "STYLE_LINEBREAK"

	DecoratorTypeSTYLEPARAGRAPH DecoratorType = "STYLE_PARAGRAPH"

	DecoratorTypeSTYLEUNDERLINE DecoratorType = "STYLE_UNDERLINE"
)

// Defines values for PositionType.
const (
	PositionTypeLEFT PositionType = "LEFT"

	PositionTypeRIGHT PositionType = "RIGHT"
)

// AplusPaginatedResponse defines model for AplusPaginatedResponse.
type AplusPaginatedResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
	NextPageToken *PageToken `json:"nextPageToken,omitempty"`
}

// The base response data for all A+ Content operations when a request is successful or partially successful. Individual operations may extend this with additional data.
type AplusResponse struct {

	// A set of messages to the user, such as warnings or comments.
	Warnings *MessageSet `json:"warnings,omitempty"`
}

// The Amazon Standard Identification Number (ASIN).
type Asin string

// A flag that provides additional information about an ASIN. This is contextual and may change depending on the request that generated it.
type AsinBadge string

// The set of ASIN badges.
type AsinBadgeSet []AsinBadge

// The A+ Content ASIN with additional metadata for content management. If you don't include the `includedDataSet` parameter in a call to the listContentDocumentAsinRelations operation, the related ASINs are returned without metadata.
type AsinMetadata struct {

	// The Amazon Standard Identification Number (ASIN).
	Asin Asin `json:"asin"`

	// The set of ASIN badges.
	BadgeSet *AsinBadgeSet `json:"badgeSet,omitempty"`

	// A set of content reference keys.
	ContentReferenceKeySet *ContentReferenceKeySet `json:"contentReferenceKeySet,omitempty"`

	// The default image for the ASIN in the Amazon catalog.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// The Amazon Standard Identification Number (ASIN).
	Parent *Asin `json:"parent,omitempty"`

	// The title for the ASIN in the Amazon catalog.
	Title *string `json:"title,omitempty"`
}

// The set of ASIN metadata.
type AsinMetadataSet []AsinMetadata

// The set of ASINs.
type AsinSet []Asin

// The relative color scheme of content.
type ColorType string

// A flag that provides additional information about an A+ Content document.
type ContentBadge string

// The set of content badges.
type ContentBadgeSet []ContentBadge

// The A+ Content document. This is the enhanced content that is published to product detail pages.
type ContentDocument struct {

	// A list of A+ Content modules.
	ContentModuleList ContentModuleList `json:"contentModuleList"`

	// The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.
	ContentSubType *ContentSubType `json:"contentSubType,omitempty"`

	// The A+ Content document type.
	ContentType ContentType `json:"contentType"`

	// The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags.
	// **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
	Locale LanguageTag `json:"locale"`

	// The A+ Content document name.
	Name string `json:"name"`
}

// The metadata of an A+ Content document.
type ContentMetadata struct {

	// The set of content badges.
	BadgeSet ContentBadgeSet `json:"badgeSet"`

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId MarketplaceId `json:"marketplaceId"`

	// The A+ Content document name.
	Name string `json:"name"`

	// The submission status of the content document.
	Status ContentStatus `json:"status"`

	// The approximate age of the A+ Content document and metadata.
	UpdateTime time.Time `json:"updateTime"`
}

// The metadata for an A+ Content document, with additional information for content management.
type ContentMetadataRecord struct {

	// The metadata of an A+ Content document.
	ContentMetadata ContentMetadata `json:"contentMetadata"`

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`
}

// A list of A+ Content metadata records.
type ContentMetadataRecordList []ContentMetadataRecord

// An A+ Content module. An A+ Content document is composed of content modules. The contentModuleType property selects which content module types to use.
type ContentModule struct {

	// The type of A+ Content module.
	ContentModuleType ContentModuleType `json:"contentModuleType"`

	// The standard company logo image.
	StandardCompanyLogo *StandardCompanyLogoModule `json:"standardCompanyLogo,omitempty"`

	// The standard product comparison table.
	StandardComparisonTable *StandardComparisonTableModule `json:"standardComparisonTable,omitempty"`

	// Four standard images with text, presented across a single row.
	StandardFourImageText *StandardFourImageTextModule `json:"standardFourImageText,omitempty"`

	// Four standard images with text, presented on a grid of four quadrants.
	StandardFourImageTextQuadrant *StandardFourImageTextQuadrantModule `json:"standardFourImageTextQuadrant,omitempty"`

	// Standard headline text, an image, and body text.
	StandardHeaderImageText *StandardHeaderImageTextModule `json:"standardHeaderImageText,omitempty"`

	// Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar.
	StandardImageSidebar *StandardImageSidebarModule `json:"standardImageSidebar,omitempty"`

	// A standard background image with a floating text box.
	StandardImageTextOverlay *StandardImageTextOverlayModule `json:"standardImageTextOverlay,omitempty"`

	// Standard images with text, presented one at a time. The user clicks on thumbnails to view each block.
	StandardMultipleImageText *StandardMultipleImageTextModule `json:"standardMultipleImageText,omitempty"`

	// Standard product description text.
	StandardProductDescription *StandardProductDescriptionModule `json:"standardProductDescription,omitempty"`

	// A standard image with several paragraphs and a bulleted list.
	StandardSingleImageHighlights *StandardSingleImageHighlightsModule `json:"standardSingleImageHighlights,omitempty"`

	// A standard image with paragraphs and a bulleted list, and extra space for technical details.
	StandardSingleImageSpecsDetail *StandardSingleImageSpecsDetailModule `json:"standardSingleImageSpecsDetail,omitempty"`

	// A standard headline and body text with an image on the side.
	StandardSingleSideImage *StandardSingleSideImageModule `json:"standardSingleSideImage,omitempty"`

	// The standard table of technical feature names and definitions.
	StandardTechSpecs *StandardTechSpecsModule `json:"standardTechSpecs,omitempty"`

	// A standard headline and body text.
	StandardText *StandardTextModule `json:"standardText,omitempty"`

	// Three standard images with text, presented across a single row.
	StandardThreeImageText *StandardThreeImageTextModule `json:"standardThreeImageText,omitempty"`
}

// A list of A+ Content modules.
type ContentModuleList []ContentModule

// The type of A+ Content module.
type ContentModuleType string

// A content document with additional information for content management.
type ContentRecord struct {

	// The A+ Content document. This is the enhanced content that is published to product detail pages.
	ContentDocument *ContentDocument `json:"contentDocument,omitempty"`

	// The metadata of an A+ Content document.
	ContentMetadata *ContentMetadata `json:"contentMetadata,omitempty"`

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`
}

// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
type ContentReferenceKey string

// A set of content reference keys.
type ContentReferenceKeySet []ContentReferenceKey

// The submission status of the content document.
type ContentStatus string

// The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.
type ContentSubType string

// The A+ Content document type.
type ContentType string

// A decorator applied to a content string value in order to create rich text.
type Decorator struct {

	// The relative intensity or variation of this decorator. Decorators such as bullet-points, for example, can have multiple indentation depths.
	Depth *int `json:"depth,omitempty"`

	// The number of content characters to alter with this decorator. Decorators such as line breaks can have zero length and fit between characters.
	Length *int `json:"length,omitempty"`

	// The starting character of this decorator within the content string. Use zero for the first character.
	Offset *int `json:"offset,omitempty"`

	// The type of rich text decorator.
	Type *DecoratorType `json:"type,omitempty"`
}

// A set of content decorators.
type DecoratorSet []Decorator

// The type of rich text decorator.
type DecoratorType string

// Error response returned when the request is unsuccessful.
type Error struct {

	// The code that identifies the type of error condition.
	Code string `json:"code"`

	// Additional information, if available, to clarify the error condition.
	Details *string `json:"details,omitempty"`

	// A human readable description of the error condition.
	Message string `json:"message"`
}

// The error response for when a request is unsuccessful.
type ErrorList struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors []Error `json:"errors"`
}

// GetContentDocumentResponse defines model for GetContentDocumentResponse.
type GetContentDocumentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A content document with additional information for content management.
	ContentRecord ContentRecord `json:"contentRecord"`
}

// A reference to an image, hosted in the A+ Content media library.
type ImageComponent struct {

	// The alternative text for the image.
	AltText string `json:"altText"`

	// The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0).
	ImageCropSpecification ImageCropSpecification `json:"imageCropSpecification"`

	// This identifier is provided by the Selling Partner API for Uploads.
	UploadDestinationId string `json:"uploadDestinationId"`
}

// The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0).
type ImageCropSpecification struct {

	// The top left corner of the cropped image, specified in the original image's coordinate space.
	Offset *ImageOffsets `json:"offset,omitempty"`

	// The dimensions extending from the top left corner of the cropped image, or the top left corner of the original image if there is no cropping. Only `pixels` is allowed as the units value for ImageDimensions.
	Size ImageDimensions `json:"size"`
}

// The dimensions extending from the top left corner of the cropped image, or the top left corner of the original image if there is no cropping. Only `pixels` is allowed as the units value for ImageDimensions.
type ImageDimensions struct {

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	Height IntegerWithUnits `json:"height"`

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	Width IntegerWithUnits `json:"width"`
}

// The top left corner of the cropped image, specified in the original image's coordinate space.
type ImageOffsets struct {

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	X IntegerWithUnits `json:"x"`

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	Y IntegerWithUnits `json:"y"`
}

// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
type IntegerWithUnits struct {

	// The unit of measurement.
	Units string `json:"units"`

	// The dimension value.
	Value int `json:"value"`
}

// The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags.
// **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
type LanguageTag string

// ListContentDocumentAsinRelationsResponse defines model for ListContentDocumentAsinRelationsResponse.
type ListContentDocumentAsinRelationsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusPaginatedResponse)
	AplusPaginatedResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The set of ASIN metadata.
	AsinMetadataSet AsinMetadataSet `json:"asinMetadataSet"`
}

// The identifier for the marketplace where the A+ Content is published.
type MarketplaceId string

// A set of messages to the user, such as warnings or comments.
type MessageSet []Error

// A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
type PageToken string

// A list of rich text content, usually presented in a text box.
type ParagraphComponent struct {
	TextList []TextComponent `json:"textList"`
}

// Plain positional text, used in collections of brief labels and descriptors.
type PlainTextItem struct {

	// The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
	Position int `json:"position"`

	// The actual plain text.
	Value string `json:"value"`
}

// The relative positioning of content.
type PositionType string

// PostContentDocumentApprovalSubmissionResponse defines model for PostContentDocumentApprovalSubmissionResponse.
type PostContentDocumentApprovalSubmissionResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
}

// PostContentDocumentAsinRelationsRequest defines model for PostContentDocumentAsinRelationsRequest.
type PostContentDocumentAsinRelationsRequest struct {

	// The set of ASINs.
	AsinSet AsinSet `json:"asinSet"`
}

// PostContentDocumentAsinRelationsResponse defines model for PostContentDocumentAsinRelationsResponse.
type PostContentDocumentAsinRelationsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
}

// PostContentDocumentRequest defines model for PostContentDocumentRequest.
type PostContentDocumentRequest struct {

	// The A+ Content document. This is the enhanced content that is published to product detail pages.
	ContentDocument ContentDocument `json:"contentDocument"`
}

// PostContentDocumentResponse defines model for PostContentDocumentResponse.
type PostContentDocumentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`
}

// PostContentDocumentSuspendSubmissionResponse defines model for PostContentDocumentSuspendSubmissionResponse.
type PostContentDocumentSuspendSubmissionResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
}

// The full context for an A+ Content publishing event.
type PublishRecord struct {

	// The Amazon Standard Identification Number (ASIN).
	Asin Asin `json:"asin"`

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`

	// The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.
	ContentSubType *ContentSubType `json:"contentSubType,omitempty"`

	// The A+ Content document type.
	ContentType ContentType `json:"contentType"`

	// The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags.
	// **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
	Locale LanguageTag `json:"locale"`

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId MarketplaceId `json:"marketplaceId"`
}

// A list of A+ Content publishing records.
type PublishRecordList []PublishRecord

// SearchContentDocumentsResponse defines model for SearchContentDocumentsResponse.
type SearchContentDocumentsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusPaginatedResponse)
	AplusPaginatedResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A list of A+ Content metadata records.
	ContentMetadataRecords ContentMetadataRecordList `json:"contentMetadataRecords"`
}

// SearchContentPublishRecordsResponse defines model for SearchContentPublishRecordsResponse.
type SearchContentPublishRecordsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusPaginatedResponse)
	AplusPaginatedResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A list of A+ Content publishing records.
	PublishRecordList PublishRecordList `json:"publishRecordList"`
}

// The standard company logo image.
type StandardCompanyLogoModule struct {

	// A reference to an image, hosted in the A+ Content media library.
	CompanyLogo ImageComponent `json:"companyLogo"`
}

// The A+ Content standard comparison product block.
type StandardComparisonProductBlock struct {

	// The Amazon Standard Identification Number (ASIN).
	Asin *Asin `json:"asin,omitempty"`

	// Determines whether this block of content is visually highlighted.
	Highlight *bool `json:"highlight,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`

	// Comparison metrics for the product.
	Metrics *[]PlainTextItem `json:"metrics,omitempty"`

	// The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
	Position int `json:"position"`

	// The comparison product title.
	Title *string `json:"title,omitempty"`
}

// The standard product comparison table.
type StandardComparisonTableModule struct {
	MetricRowLabels *[]PlainTextItem                  `json:"metricRowLabels,omitempty"`
	ProductColumns  *[]StandardComparisonProductBlock `json:"productColumns,omitempty"`
}

// Four standard images with text, presented across a single row.
type StandardFourImageTextModule struct {

	// The A+ Content standard image and text box block.
	Block1 *StandardImageTextBlock `json:"block1,omitempty"`

	// The A+ Content standard image and text box block.
	Block2 *StandardImageTextBlock `json:"block2,omitempty"`

	// The A+ Content standard image and text box block.
	Block3 *StandardImageTextBlock `json:"block3,omitempty"`

	// The A+ Content standard image and text box block.
	Block4 *StandardImageTextBlock `json:"block4,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// Four standard images with text, presented on a grid of four quadrants.
type StandardFourImageTextQuadrantModule struct {

	// The A+ Content standard image and text box block.
	Block1 StandardImageTextBlock `json:"block1"`

	// The A+ Content standard image and text box block.
	Block2 StandardImageTextBlock `json:"block2"`

	// The A+ Content standard image and text box block.
	Block3 StandardImageTextBlock `json:"block3"`

	// The A+ Content standard image and text box block.
	Block4 StandardImageTextBlock `json:"block4"`
}

// Standard headline text, an image, and body text.
type StandardHeaderImageTextModule struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// The A+ standard fixed-length list of text, with a related headline.
type StandardHeaderTextListBlock struct {

	// The A+ Content standard fixed length list of text, usually presented as bullet points.
	Block *StandardTextListBlock `json:"block,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// The A+ Content standard image and caption block.
type StandardImageCaptionBlock struct {

	// Rich text content.
	Caption *TextComponent `json:"caption,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`
}

// Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar.
type StandardImageSidebarModule struct {

	// The A+ Content standard fixed length list of text, usually presented as bullet points.
	DescriptionListBlock *StandardTextListBlock `json:"descriptionListBlock,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	DescriptionTextBlock *StandardTextBlock `json:"descriptionTextBlock,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// The A+ Content standard image and caption block.
	ImageCaptionBlock *StandardImageCaptionBlock `json:"imageCaptionBlock,omitempty"`

	// The A+ Content standard image and text box block.
	SidebarImageTextBlock *StandardImageTextBlock `json:"sidebarImageTextBlock,omitempty"`

	// The A+ Content standard fixed length list of text, usually presented as bullet points.
	SidebarListBlock *StandardTextListBlock `json:"sidebarListBlock,omitempty"`
}

// The A+ Content standard image and text box block.
type StandardImageTextBlock struct {

	// A list of rich text content, usually presented in a text box.
	Body *ParagraphComponent `json:"body,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`
}

// The A+ Content standard image and text block, with a related caption. The caption may not display on all devices.
type StandardImageTextCaptionBlock struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// Rich text content.
	Caption *TextComponent `json:"caption,omitempty"`
}

// A standard background image with a floating text box.
type StandardImageTextOverlayModule struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// The relative color scheme of content.
	OverlayColorType ColorType `json:"overlayColorType"`
}

// Standard images with text, presented one at a time. The user clicks on thumbnails to view each block.
type StandardMultipleImageTextModule struct {
	Blocks *[]StandardImageTextCaptionBlock `json:"blocks,omitempty"`
}

// Standard product description text.
type StandardProductDescriptionModule struct {

	// A list of rich text content, usually presented in a text box.
	Body ParagraphComponent `json:"body"`
}

// A standard image with several paragraphs and a bulleted list.
type StandardSingleImageHighlightsModule struct {

	// The A+ standard fixed-length list of text, with a related headline.
	BulletedListBlock *StandardHeaderTextListBlock `json:"bulletedListBlock,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	TextBlock1 *StandardTextBlock `json:"textBlock1,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	TextBlock2 *StandardTextBlock `json:"textBlock2,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	TextBlock3 *StandardTextBlock `json:"textBlock3,omitempty"`
}

// A standard image with paragraphs and a bulleted list, and extra space for technical details.
type StandardSingleImageSpecsDetailModule struct {

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	DescriptionBlock1 *StandardTextBlock `json:"descriptionBlock1,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	DescriptionBlock2 *StandardTextBlock `json:"descriptionBlock2,omitempty"`

	// Rich text content.
	DescriptionHeadline *TextComponent `json:"descriptionHeadline,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`

	// Rich text content.
	SpecificationHeadline *TextComponent `json:"specificationHeadline,omitempty"`

	// The A+ standard fixed-length list of text, with a related headline.
	SpecificationListBlock *StandardHeaderTextListBlock `json:"specificationListBlock,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	SpecificationTextBlock *StandardTextBlock `json:"specificationTextBlock,omitempty"`
}

// A standard headline and body text with an image on the side.
type StandardSingleSideImageModule struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// The relative positioning of content.
	ImagePositionType PositionType `json:"imagePositionType"`
}

// The standard table of technical feature names and definitions.
type StandardTechSpecsModule struct {

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// The specification list.
	SpecificationList []StandardTextPairBlock `json:"specificationList"`

	// The number of tables to present. Features are evenly divided between the tables.
	TableCount *int `json:"tableCount,omitempty"`
}

// The A+ Content standard text box block, comprised of a paragraph with a headline.
type StandardTextBlock struct {

	// A list of rich text content, usually presented in a text box.
	Body *ParagraphComponent `json:"body,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// The A+ Content standard fixed length list of text, usually presented as bullet points.
type StandardTextListBlock struct {
	TextList []TextItem `json:"textList"`
}

// A standard headline and body text.
type StandardTextModule struct {

	// A list of rich text content, usually presented in a text box.
	Body ParagraphComponent `json:"body"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// The A+ Content standard label and description block, comprised of a pair of text components.
type StandardTextPairBlock struct {

	// Rich text content.
	Description *TextComponent `json:"description,omitempty"`

	// Rich text content.
	Label *TextComponent `json:"label,omitempty"`
}

// Three standard images with text, presented across a single row.
type StandardThreeImageTextModule struct {

	// The A+ Content standard image and text box block.
	Block1 *StandardImageTextBlock `json:"block1,omitempty"`

	// The A+ Content standard image and text box block.
	Block2 *StandardImageTextBlock `json:"block2,omitempty"`

	// The A+ Content standard image and text box block.
	Block3 *StandardImageTextBlock `json:"block3,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// Rich text content.
type TextComponent struct {

	// A set of content decorators.
	DecoratorSet *DecoratorSet `json:"decoratorSet,omitempty"`

	// The actual plain text.
	Value string `json:"value"`
}

// Rich positional text, usually presented as a collection of bullet points.
type TextItem struct {

	// The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
	Position int `json:"position"`

	// Rich text content.
	Text TextComponent `json:"text"`
}

// ValidateContentDocumentAsinRelationsResponse defines model for ValidateContentDocumentAsinRelationsResponse.
type ValidateContentDocumentAsinRelationsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ErrorList)
	ErrorList `yaml:",inline"`
}

// ValidateContentDocumentAsinRelationsJSONBody defines parameters for ValidateContentDocumentAsinRelations.
type ValidateContentDocumentAsinRelationsJSONBody PostContentDocumentRequest

// ValidateContentDocumentAsinRelationsParams defines parameters for ValidateContentDocumentAsinRelations.
type ValidateContentDocumentAsinRelationsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The set of ASINs.
	AsinSet *[]string `json:"asinSet,omitempty"`
}

// SearchContentDocumentsParams defines parameters for SearchContentDocuments.
type SearchContentDocumentsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
	PageToken *string `json:"pageToken,omitempty"`
}

// CreateContentDocumentJSONBody defines parameters for CreateContentDocument.
type CreateContentDocumentJSONBody PostContentDocumentRequest

// CreateContentDocumentParams defines parameters for CreateContentDocument.
type CreateContentDocumentParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// GetContentDocumentParams defines parameters for GetContentDocument.
type GetContentDocumentParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The set of A+ Content data types to include in the response.
	IncludedDataSet []GetContentDocumentParamsIncludedDataSet `json:"includedDataSet"`
}

// GetContentDocumentParamsIncludedDataSet defines parameters for GetContentDocument.
type GetContentDocumentParamsIncludedDataSet string

// UpdateContentDocumentJSONBody defines parameters for UpdateContentDocument.
type UpdateContentDocumentJSONBody PostContentDocumentRequest

// UpdateContentDocumentParams defines parameters for UpdateContentDocument.
type UpdateContentDocumentParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// PostContentDocumentApprovalSubmissionParams defines parameters for PostContentDocumentApprovalSubmission.
type PostContentDocumentApprovalSubmissionParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// ListContentDocumentAsinRelationsParams defines parameters for ListContentDocumentAsinRelations.
type ListContentDocumentAsinRelationsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.
	IncludedDataSet *[]ListContentDocumentAsinRelationsParamsIncludedDataSet `json:"includedDataSet,omitempty"`

	// The set of ASINs.
	AsinSet *[]string `json:"asinSet,omitempty"`

	// A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
	PageToken *string `json:"pageToken,omitempty"`
}

// ListContentDocumentAsinRelationsParamsIncludedDataSet defines parameters for ListContentDocumentAsinRelations.
type ListContentDocumentAsinRelationsParamsIncludedDataSet string

// PostContentDocumentAsinRelationsJSONBody defines parameters for PostContentDocumentAsinRelations.
type PostContentDocumentAsinRelationsJSONBody PostContentDocumentAsinRelationsRequest

// PostContentDocumentAsinRelationsParams defines parameters for PostContentDocumentAsinRelations.
type PostContentDocumentAsinRelationsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// PostContentDocumentSuspendSubmissionParams defines parameters for PostContentDocumentSuspendSubmission.
type PostContentDocumentSuspendSubmissionParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// SearchContentPublishRecordsParams defines parameters for SearchContentPublishRecords.
type SearchContentPublishRecordsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The Amazon Standard Identification Number (ASIN).
	Asin string `json:"asin"`

	// A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
	PageToken *string `json:"pageToken,omitempty"`
}

// ValidateContentDocumentAsinRelationsJSONRequestBody defines body for ValidateContentDocumentAsinRelations for application/json ContentType.
type ValidateContentDocumentAsinRelationsJSONRequestBody ValidateContentDocumentAsinRelationsJSONBody

// CreateContentDocumentJSONRequestBody defines body for CreateContentDocument for application/json ContentType.
type CreateContentDocumentJSONRequestBody CreateContentDocumentJSONBody

// UpdateContentDocumentJSONRequestBody defines body for UpdateContentDocument for application/json ContentType.
type UpdateContentDocumentJSONRequestBody UpdateContentDocumentJSONBody

// PostContentDocumentAsinRelationsJSONRequestBody defines body for PostContentDocumentAsinRelations for application/json ContentType.
type PostContentDocumentAsinRelationsJSONRequestBody PostContentDocumentAsinRelationsJSONBody
