// Package aplusContent provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package aplusContent

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ValidateContentDocumentAsinRelations request  with any body
	ValidateContentDocumentAsinRelationsWithBody(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateContentDocumentAsinRelations(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, body ValidateContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchContentDocuments request
	SearchContentDocuments(ctx context.Context, params *SearchContentDocumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContentDocument request  with any body
	CreateContentDocumentWithBody(ctx context.Context, params *CreateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContentDocument(ctx context.Context, params *CreateContentDocumentParams, body CreateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentDocument request
	GetContentDocument(ctx context.Context, contentReferenceKey string, params *GetContentDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContentDocument request  with any body
	UpdateContentDocumentWithBody(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContentDocument(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, body UpdateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentDocumentApprovalSubmission request
	PostContentDocumentApprovalSubmission(ctx context.Context, contentReferenceKey string, params *PostContentDocumentApprovalSubmissionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListContentDocumentAsinRelations request
	ListContentDocumentAsinRelations(ctx context.Context, contentReferenceKey string, params *ListContentDocumentAsinRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentDocumentAsinRelations request  with any body
	PostContentDocumentAsinRelationsWithBody(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContentDocumentAsinRelations(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, body PostContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContentDocumentSuspendSubmission request
	PostContentDocumentSuspendSubmission(ctx context.Context, contentReferenceKey string, params *PostContentDocumentSuspendSubmissionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchContentPublishRecords request
	SearchContentPublishRecords(ctx context.Context, params *SearchContentPublishRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ValidateContentDocumentAsinRelationsWithBody(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateContentDocumentAsinRelationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateContentDocumentAsinRelations(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, body ValidateContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateContentDocumentAsinRelationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchContentDocuments(ctx context.Context, params *SearchContentDocumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchContentDocumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContentDocumentWithBody(ctx context.Context, params *CreateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContentDocumentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContentDocument(ctx context.Context, params *CreateContentDocumentParams, body CreateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContentDocumentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentDocument(ctx context.Context, contentReferenceKey string, params *GetContentDocumentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentDocumentRequest(c.Server, contentReferenceKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContentDocumentWithBody(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContentDocumentRequestWithBody(c.Server, contentReferenceKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContentDocument(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, body UpdateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContentDocumentRequest(c.Server, contentReferenceKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentDocumentApprovalSubmission(ctx context.Context, contentReferenceKey string, params *PostContentDocumentApprovalSubmissionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentDocumentApprovalSubmissionRequest(c.Server, contentReferenceKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListContentDocumentAsinRelations(ctx context.Context, contentReferenceKey string, params *ListContentDocumentAsinRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListContentDocumentAsinRelationsRequest(c.Server, contentReferenceKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentDocumentAsinRelationsWithBody(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentDocumentAsinRelationsRequestWithBody(c.Server, contentReferenceKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentDocumentAsinRelations(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, body PostContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentDocumentAsinRelationsRequest(c.Server, contentReferenceKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContentDocumentSuspendSubmission(ctx context.Context, contentReferenceKey string, params *PostContentDocumentSuspendSubmissionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContentDocumentSuspendSubmissionRequest(c.Server, contentReferenceKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchContentPublishRecords(ctx context.Context, params *SearchContentPublishRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchContentPublishRecordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewValidateContentDocumentAsinRelationsRequest calls the generic ValidateContentDocumentAsinRelations builder with application/json body
func NewValidateContentDocumentAsinRelationsRequest(server string, params *ValidateContentDocumentAsinRelationsParams, body ValidateContentDocumentAsinRelationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateContentDocumentAsinRelationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewValidateContentDocumentAsinRelationsRequestWithBody generates requests for ValidateContentDocumentAsinRelations with any type of body
func NewValidateContentDocumentAsinRelationsRequestWithBody(server string, params *ValidateContentDocumentAsinRelationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentAsinValidations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.AsinSet != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asinSet", runtime.ParamLocationQuery, *params.AsinSet); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchContentDocumentsRequest generates requests for SearchContentDocuments
func NewSearchContentDocumentsRequest(server string, params *SearchContentDocumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContentDocumentRequest calls the generic CreateContentDocument builder with application/json body
func NewCreateContentDocumentRequest(server string, params *CreateContentDocumentParams, body CreateContentDocumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContentDocumentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateContentDocumentRequestWithBody generates requests for CreateContentDocument with any type of body
func NewCreateContentDocumentRequestWithBody(server string, params *CreateContentDocumentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContentDocumentRequest generates requests for GetContentDocument
func NewGetContentDocumentRequest(server string, contentReferenceKey string, params *GetContentDocumentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contentReferenceKey", runtime.ParamLocationPath, contentReferenceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includedDataSet", runtime.ParamLocationQuery, params.IncludedDataSet); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContentDocumentRequest calls the generic UpdateContentDocument builder with application/json body
func NewUpdateContentDocumentRequest(server string, contentReferenceKey string, params *UpdateContentDocumentParams, body UpdateContentDocumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContentDocumentRequestWithBody(server, contentReferenceKey, params, "application/json", bodyReader)
}

// NewUpdateContentDocumentRequestWithBody generates requests for UpdateContentDocument with any type of body
func NewUpdateContentDocumentRequestWithBody(server string, contentReferenceKey string, params *UpdateContentDocumentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contentReferenceKey", runtime.ParamLocationPath, contentReferenceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContentDocumentApprovalSubmissionRequest generates requests for PostContentDocumentApprovalSubmission
func NewPostContentDocumentApprovalSubmissionRequest(server string, contentReferenceKey string, params *PostContentDocumentApprovalSubmissionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contentReferenceKey", runtime.ParamLocationPath, contentReferenceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments/%s/approvalSubmissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListContentDocumentAsinRelationsRequest generates requests for ListContentDocumentAsinRelations
func NewListContentDocumentAsinRelationsRequest(server string, contentReferenceKey string, params *ListContentDocumentAsinRelationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contentReferenceKey", runtime.ParamLocationPath, contentReferenceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments/%s/asins", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IncludedDataSet != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includedDataSet", runtime.ParamLocationQuery, *params.IncludedDataSet); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AsinSet != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asinSet", runtime.ParamLocationQuery, *params.AsinSet); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContentDocumentAsinRelationsRequest calls the generic PostContentDocumentAsinRelations builder with application/json body
func NewPostContentDocumentAsinRelationsRequest(server string, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, body PostContentDocumentAsinRelationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContentDocumentAsinRelationsRequestWithBody(server, contentReferenceKey, params, "application/json", bodyReader)
}

// NewPostContentDocumentAsinRelationsRequestWithBody generates requests for PostContentDocumentAsinRelations with any type of body
func NewPostContentDocumentAsinRelationsRequestWithBody(server string, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contentReferenceKey", runtime.ParamLocationPath, contentReferenceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments/%s/asins", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContentDocumentSuspendSubmissionRequest generates requests for PostContentDocumentSuspendSubmission
func NewPostContentDocumentSuspendSubmissionRequest(server string, contentReferenceKey string, params *PostContentDocumentSuspendSubmissionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contentReferenceKey", runtime.ParamLocationPath, contentReferenceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentDocuments/%s/suspendSubmissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchContentPublishRecordsRequest generates requests for SearchContentPublishRecords
func NewSearchContentPublishRecordsRequest(server string, params *SearchContentPublishRecordsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/aplus/2020-11-01/contentPublishRecords")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asin", runtime.ParamLocationQuery, params.Asin); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ValidateContentDocumentAsinRelations request  with any body
	ValidateContentDocumentAsinRelationsWithBodyWithResponse(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateContentDocumentAsinRelationsResponse, error)

	ValidateContentDocumentAsinRelationsWithResponse(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, body ValidateContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateContentDocumentAsinRelationsResponse, error)

	// SearchContentDocuments request
	SearchContentDocumentsWithResponse(ctx context.Context, params *SearchContentDocumentsParams, reqEditors ...RequestEditorFn) (*SearchContentDocumentsResponse, error)

	// CreateContentDocument request  with any body
	CreateContentDocumentWithBodyWithResponse(ctx context.Context, params *CreateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContentDocumentResponse, error)

	CreateContentDocumentWithResponse(ctx context.Context, params *CreateContentDocumentParams, body CreateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContentDocumentResponse, error)

	// GetContentDocument request
	GetContentDocumentWithResponse(ctx context.Context, contentReferenceKey string, params *GetContentDocumentParams, reqEditors ...RequestEditorFn) (*GetContentDocumentResponse, error)

	// UpdateContentDocument request  with any body
	UpdateContentDocumentWithBodyWithResponse(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContentDocumentResponse, error)

	UpdateContentDocumentWithResponse(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, body UpdateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContentDocumentResponse, error)

	// PostContentDocumentApprovalSubmission request
	PostContentDocumentApprovalSubmissionWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentApprovalSubmissionParams, reqEditors ...RequestEditorFn) (*PostContentDocumentApprovalSubmissionResponse, error)

	// ListContentDocumentAsinRelations request
	ListContentDocumentAsinRelationsWithResponse(ctx context.Context, contentReferenceKey string, params *ListContentDocumentAsinRelationsParams, reqEditors ...RequestEditorFn) (*ListContentDocumentAsinRelationsResponse, error)

	// PostContentDocumentAsinRelations request  with any body
	PostContentDocumentAsinRelationsWithBodyWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentDocumentAsinRelationsResponse, error)

	PostContentDocumentAsinRelationsWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, body PostContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentDocumentAsinRelationsResponse, error)

	// PostContentDocumentSuspendSubmission request
	PostContentDocumentSuspendSubmissionWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentSuspendSubmissionParams, reqEditors ...RequestEditorFn) (*PostContentDocumentSuspendSubmissionResponse, error)

	// SearchContentPublishRecords request
	SearchContentPublishRecordsWithResponse(ctx context.Context, params *SearchContentPublishRecordsParams, reqEditors ...RequestEditorFn) (*SearchContentPublishRecordsResponse, error)
}

type ValidateContentDocumentAsinRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateContentDocumentAsinRelationsResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r ValidateContentDocumentAsinRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateContentDocumentAsinRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchContentDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchContentDocumentsResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON410      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r SearchContentDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchContentDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContentDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostContentDocumentResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r CreateContentDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContentDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetContentDocumentResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON410      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r GetContentDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContentDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostContentDocumentResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON410      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r UpdateContentDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContentDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentDocumentApprovalSubmissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostContentDocumentApprovalSubmissionResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON410      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r PostContentDocumentApprovalSubmissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentDocumentApprovalSubmissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListContentDocumentAsinRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListContentDocumentAsinRelationsResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON410      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r ListContentDocumentAsinRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListContentDocumentAsinRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentDocumentAsinRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostContentDocumentAsinRelationsResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON410      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r PostContentDocumentAsinRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentDocumentAsinRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContentDocumentSuspendSubmissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostContentDocumentSuspendSubmissionResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON410      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r PostContentDocumentSuspendSubmissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContentDocumentSuspendSubmissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchContentPublishRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchContentPublishRecordsResponse
	JSON400      *ErrorList
	JSON401      *ErrorList
	JSON403      *ErrorList
	JSON404      *ErrorList
	JSON429      *ErrorList
	JSON500      *ErrorList
	JSON503      *ErrorList
}

// Status returns HTTPResponse.Status
func (r SearchContentPublishRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchContentPublishRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ValidateContentDocumentAsinRelationsWithBodyWithResponse request with arbitrary body returning *ValidateContentDocumentAsinRelationsResponse
func (c *ClientWithResponses) ValidateContentDocumentAsinRelationsWithBodyWithResponse(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateContentDocumentAsinRelationsResponse, error) {
	rsp, err := c.ValidateContentDocumentAsinRelationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateContentDocumentAsinRelationsResponse(rsp)
}

func (c *ClientWithResponses) ValidateContentDocumentAsinRelationsWithResponse(ctx context.Context, params *ValidateContentDocumentAsinRelationsParams, body ValidateContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateContentDocumentAsinRelationsResponse, error) {
	rsp, err := c.ValidateContentDocumentAsinRelations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateContentDocumentAsinRelationsResponse(rsp)
}

// SearchContentDocumentsWithResponse request returning *SearchContentDocumentsResponse
func (c *ClientWithResponses) SearchContentDocumentsWithResponse(ctx context.Context, params *SearchContentDocumentsParams, reqEditors ...RequestEditorFn) (*SearchContentDocumentsResponse, error) {
	rsp, err := c.SearchContentDocuments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchContentDocumentsResponse(rsp)
}

// CreateContentDocumentWithBodyWithResponse request with arbitrary body returning *CreateContentDocumentResponse
func (c *ClientWithResponses) CreateContentDocumentWithBodyWithResponse(ctx context.Context, params *CreateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContentDocumentResponse, error) {
	rsp, err := c.CreateContentDocumentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContentDocumentResponse(rsp)
}

func (c *ClientWithResponses) CreateContentDocumentWithResponse(ctx context.Context, params *CreateContentDocumentParams, body CreateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContentDocumentResponse, error) {
	rsp, err := c.CreateContentDocument(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContentDocumentResponse(rsp)
}

// GetContentDocumentWithResponse request returning *GetContentDocumentResponse
func (c *ClientWithResponses) GetContentDocumentWithResponse(ctx context.Context, contentReferenceKey string, params *GetContentDocumentParams, reqEditors ...RequestEditorFn) (*GetContentDocumentResponse, error) {
	rsp, err := c.GetContentDocument(ctx, contentReferenceKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentDocumentResponse(rsp)
}

// UpdateContentDocumentWithBodyWithResponse request with arbitrary body returning *UpdateContentDocumentResponse
func (c *ClientWithResponses) UpdateContentDocumentWithBodyWithResponse(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContentDocumentResponse, error) {
	rsp, err := c.UpdateContentDocumentWithBody(ctx, contentReferenceKey, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContentDocumentResponse(rsp)
}

func (c *ClientWithResponses) UpdateContentDocumentWithResponse(ctx context.Context, contentReferenceKey string, params *UpdateContentDocumentParams, body UpdateContentDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContentDocumentResponse, error) {
	rsp, err := c.UpdateContentDocument(ctx, contentReferenceKey, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContentDocumentResponse(rsp)
}

// PostContentDocumentApprovalSubmissionWithResponse request returning *PostContentDocumentApprovalSubmissionResponse
func (c *ClientWithResponses) PostContentDocumentApprovalSubmissionWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentApprovalSubmissionParams, reqEditors ...RequestEditorFn) (*PostContentDocumentApprovalSubmissionResponse, error) {
	rsp, err := c.PostContentDocumentApprovalSubmission(ctx, contentReferenceKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentDocumentApprovalSubmissionResponse(rsp)
}

// ListContentDocumentAsinRelationsWithResponse request returning *ListContentDocumentAsinRelationsResponse
func (c *ClientWithResponses) ListContentDocumentAsinRelationsWithResponse(ctx context.Context, contentReferenceKey string, params *ListContentDocumentAsinRelationsParams, reqEditors ...RequestEditorFn) (*ListContentDocumentAsinRelationsResponse, error) {
	rsp, err := c.ListContentDocumentAsinRelations(ctx, contentReferenceKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListContentDocumentAsinRelationsResponse(rsp)
}

// PostContentDocumentAsinRelationsWithBodyWithResponse request with arbitrary body returning *PostContentDocumentAsinRelationsResponse
func (c *ClientWithResponses) PostContentDocumentAsinRelationsWithBodyWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContentDocumentAsinRelationsResponse, error) {
	rsp, err := c.PostContentDocumentAsinRelationsWithBody(ctx, contentReferenceKey, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentDocumentAsinRelationsResponse(rsp)
}

func (c *ClientWithResponses) PostContentDocumentAsinRelationsWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentAsinRelationsParams, body PostContentDocumentAsinRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContentDocumentAsinRelationsResponse, error) {
	rsp, err := c.PostContentDocumentAsinRelations(ctx, contentReferenceKey, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentDocumentAsinRelationsResponse(rsp)
}

// PostContentDocumentSuspendSubmissionWithResponse request returning *PostContentDocumentSuspendSubmissionResponse
func (c *ClientWithResponses) PostContentDocumentSuspendSubmissionWithResponse(ctx context.Context, contentReferenceKey string, params *PostContentDocumentSuspendSubmissionParams, reqEditors ...RequestEditorFn) (*PostContentDocumentSuspendSubmissionResponse, error) {
	rsp, err := c.PostContentDocumentSuspendSubmission(ctx, contentReferenceKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContentDocumentSuspendSubmissionResponse(rsp)
}

// SearchContentPublishRecordsWithResponse request returning *SearchContentPublishRecordsResponse
func (c *ClientWithResponses) SearchContentPublishRecordsWithResponse(ctx context.Context, params *SearchContentPublishRecordsParams, reqEditors ...RequestEditorFn) (*SearchContentPublishRecordsResponse, error) {
	rsp, err := c.SearchContentPublishRecords(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchContentPublishRecordsResponse(rsp)
}

// ParseValidateContentDocumentAsinRelationsResponse parses an HTTP response from a ValidateContentDocumentAsinRelationsWithResponse call
func ParseValidateContentDocumentAsinRelationsResponse(rsp *http.Response) (*ValidateContentDocumentAsinRelationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ValidateContentDocumentAsinRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateContentDocumentAsinRelationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSearchContentDocumentsResponse parses an HTTP response from a SearchContentDocumentsWithResponse call
func ParseSearchContentDocumentsResponse(rsp *http.Response) (*SearchContentDocumentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SearchContentDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchContentDocumentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateContentDocumentResponse parses an HTTP response from a CreateContentDocumentWithResponse call
func ParseCreateContentDocumentResponse(rsp *http.Response) (*CreateContentDocumentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateContentDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostContentDocumentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetContentDocumentResponse parses an HTTP response from a GetContentDocumentWithResponse call
func ParseGetContentDocumentResponse(rsp *http.Response) (*GetContentDocumentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContentDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetContentDocumentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateContentDocumentResponse parses an HTTP response from a UpdateContentDocumentWithResponse call
func ParseUpdateContentDocumentResponse(rsp *http.Response) (*UpdateContentDocumentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateContentDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostContentDocumentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostContentDocumentApprovalSubmissionResponse parses an HTTP response from a PostContentDocumentApprovalSubmissionWithResponse call
func ParsePostContentDocumentApprovalSubmissionResponse(rsp *http.Response) (*PostContentDocumentApprovalSubmissionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostContentDocumentApprovalSubmissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostContentDocumentApprovalSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListContentDocumentAsinRelationsResponse parses an HTTP response from a ListContentDocumentAsinRelationsWithResponse call
func ParseListContentDocumentAsinRelationsResponse(rsp *http.Response) (*ListContentDocumentAsinRelationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListContentDocumentAsinRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListContentDocumentAsinRelationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostContentDocumentAsinRelationsResponse parses an HTTP response from a PostContentDocumentAsinRelationsWithResponse call
func ParsePostContentDocumentAsinRelationsResponse(rsp *http.Response) (*PostContentDocumentAsinRelationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostContentDocumentAsinRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostContentDocumentAsinRelationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostContentDocumentSuspendSubmissionResponse parses an HTTP response from a PostContentDocumentSuspendSubmissionWithResponse call
func ParsePostContentDocumentSuspendSubmissionResponse(rsp *http.Response) (*PostContentDocumentSuspendSubmissionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostContentDocumentSuspendSubmissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostContentDocumentSuspendSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSearchContentPublishRecordsResponse parses an HTTP response from a SearchContentPublishRecordsWithResponse call
func ParseSearchContentPublishRecordsResponse(rsp *http.Response) (*SearchContentPublishRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SearchContentPublishRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchContentPublishRecordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
