// Package fbaInbound provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package fbaInbound

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for BarcodeInstruction.
const (
	BarcodeInstructionCanUseOriginalBarcode BarcodeInstruction = "CanUseOriginalBarcode"

	BarcodeInstructionMustProvideSellerSKU BarcodeInstruction = "MustProvideSellerSKU"

	BarcodeInstructionRequiresFNSKULabel BarcodeInstruction = "RequiresFNSKULabel"
)

// Defines values for BoxContentsSource.
const (
	BoxContentsSourceDBARCODE BoxContentsSource = "2D_BARCODE"

	BoxContentsSourceFEED BoxContentsSource = "FEED"

	BoxContentsSourceINTERACTIVE BoxContentsSource = "INTERACTIVE"

	BoxContentsSourceNONE BoxContentsSource = "NONE"
)

// Defines values for Condition.
const (
	ConditionClub Condition = "Club"

	ConditionCollectibleAcceptable Condition = "CollectibleAcceptable"

	ConditionCollectibleGood Condition = "CollectibleGood"

	ConditionCollectibleLikeNew Condition = "CollectibleLikeNew"

	ConditionCollectiblePoor Condition = "CollectiblePoor"

	ConditionCollectibleVeryGood Condition = "CollectibleVeryGood"

	ConditionNewItem Condition = "NewItem"

	ConditionNewOEM Condition = "NewOEM"

	ConditionNewOpenBox Condition = "NewOpenBox"

	ConditionNewWithWarranty Condition = "NewWithWarranty"

	ConditionRefurbished Condition = "Refurbished"

	ConditionRefurbishedWithWarranty Condition = "RefurbishedWithWarranty"

	ConditionUsedAcceptable Condition = "UsedAcceptable"

	ConditionUsedGood Condition = "UsedGood"

	ConditionUsedLikeNew Condition = "UsedLikeNew"

	ConditionUsedPoor Condition = "UsedPoor"

	ConditionUsedRefurbished Condition = "UsedRefurbished"

	ConditionUsedVeryGood Condition = "UsedVeryGood"
)

// Defines values for CurrencyCode.
const (
	CurrencyCodeGBP CurrencyCode = "GBP"

	CurrencyCodeUSD CurrencyCode = "USD"
)

// Defines values for ErrorReason.
const (
	ErrorReasonDoesNotExist ErrorReason = "DoesNotExist"

	ErrorReasonInvalidASIN ErrorReason = "InvalidASIN"
)

// Defines values for GuidanceReason.
const (
	GuidanceReasonNoApplicableGuidance GuidanceReason = "NoApplicableGuidance"

	GuidanceReasonSlowMovingASIN GuidanceReason = "SlowMovingASIN"
)

// Defines values for InboundGuidance.
const (
	InboundGuidanceInboundNotRecommended InboundGuidance = "InboundNotRecommended"

	InboundGuidanceInboundOK InboundGuidance = "InboundOK"
)

// Defines values for IntendedBoxContentsSource.
const (
	IntendedBoxContentsSourceDBARCODE IntendedBoxContentsSource = "2D_BARCODE"

	IntendedBoxContentsSourceFEED IntendedBoxContentsSource = "FEED"

	IntendedBoxContentsSourceNONE IntendedBoxContentsSource = "NONE"
)

// Defines values for LabelPrepPreference.
const (
	LabelPrepPreferenceAMAZONLABELONLY LabelPrepPreference = "AMAZON_LABEL_ONLY"

	LabelPrepPreferenceAMAZONLABELPREFERRED LabelPrepPreference = "AMAZON_LABEL_PREFERRED"

	LabelPrepPreferenceSELLERLABEL LabelPrepPreference = "SELLER_LABEL"
)

// Defines values for LabelPrepType.
const (
	LabelPrepTypeAMAZONLABEL LabelPrepType = "AMAZON_LABEL"

	LabelPrepTypeNOLABEL LabelPrepType = "NO_LABEL"

	LabelPrepTypeSELLERLABEL LabelPrepType = "SELLER_LABEL"
)

// Defines values for PackageStatus.
const (
	PackageStatusCHECKEDIN PackageStatus = "CHECKED_IN"

	PackageStatusCLOSED PackageStatus = "CLOSED"

	PackageStatusDELETED PackageStatus = "DELETED"

	PackageStatusDELIVERED PackageStatus = "DELIVERED"

	PackageStatusINTRANSIT PackageStatus = "IN_TRANSIT"

	PackageStatusRECEIVING PackageStatus = "RECEIVING"

	PackageStatusSHIPPED PackageStatus = "SHIPPED"
)

// Defines values for PrepGuidance.
const (
	PrepGuidanceConsultHelpDocuments PrepGuidance = "ConsultHelpDocuments"

	PrepGuidanceNoAdditionalPrepRequired PrepGuidance = "NoAdditionalPrepRequired"

	PrepGuidanceSeePrepInstructionsList PrepGuidance = "SeePrepInstructionsList"
)

// Defines values for PrepInstruction.
const (
	PrepInstructionBlackShrinkWrapping PrepInstruction = "BlackShrinkWrapping"

	PrepInstructionBubbleWrapping PrepInstruction = "BubbleWrapping"

	PrepInstructionHangGarment PrepInstruction = "HangGarment"

	PrepInstructionLabeling PrepInstruction = "Labeling"

	PrepInstructionPolybagging PrepInstruction = "Polybagging"

	PrepInstructionTaping PrepInstruction = "Taping"
)

// Defines values for PrepOwner.
const (
	PrepOwnerAMAZON PrepOwner = "AMAZON"

	PrepOwnerSELLER PrepOwner = "SELLER"
)

// Defines values for SellerFreightClass.
const (
	SellerFreightClassN0 SellerFreightClass = "50"

	SellerFreightClassN00 SellerFreightClass = "100"

	SellerFreightClassN001 SellerFreightClass = "200"

	SellerFreightClassN002 SellerFreightClass = "300"

	SellerFreightClassN003 SellerFreightClass = "400"

	SellerFreightClassN004 SellerFreightClass = "500"

	SellerFreightClassN01 SellerFreightClass = "60"

	SellerFreightClassN02 SellerFreightClass = "70"

	SellerFreightClassN10 SellerFreightClass = "110"

	SellerFreightClassN25 SellerFreightClass = "92.5"

	SellerFreightClassN251 SellerFreightClass = "125"

	SellerFreightClassN5 SellerFreightClass = "55"

	SellerFreightClassN50 SellerFreightClass = "150"

	SellerFreightClassN501 SellerFreightClass = "250"

	SellerFreightClassN51 SellerFreightClass = "65"

	SellerFreightClassN52 SellerFreightClass = "85"

	SellerFreightClassN75 SellerFreightClass = "77.5"

	SellerFreightClassN751 SellerFreightClass = "175"
)

// Defines values for ShipmentStatus.
const (
	ShipmentStatusCANCELLED ShipmentStatus = "CANCELLED"

	ShipmentStatusCHECKEDIN ShipmentStatus = "CHECKED_IN"

	ShipmentStatusCLOSED ShipmentStatus = "CLOSED"

	ShipmentStatusDELETED ShipmentStatus = "DELETED"

	ShipmentStatusDELIVERED ShipmentStatus = "DELIVERED"

	ShipmentStatusERROR ShipmentStatus = "ERROR"

	ShipmentStatusINTRANSIT ShipmentStatus = "IN_TRANSIT"

	ShipmentStatusRECEIVING ShipmentStatus = "RECEIVING"

	ShipmentStatusSHIPPED ShipmentStatus = "SHIPPED"

	ShipmentStatusWORKING ShipmentStatus = "WORKING"
)

// Defines values for ShipmentType.
const (
	ShipmentTypeLTL ShipmentType = "LTL"

	ShipmentTypeSP ShipmentType = "SP"
)

// Defines values for TransportStatus.
const (
	TransportStatusCONFIRMED TransportStatus = "CONFIRMED"

	TransportStatusCONFIRMING TransportStatus = "CONFIRMING"

	TransportStatusERROR TransportStatus = "ERROR"

	TransportStatusERRORINVOIDING TransportStatus = "ERROR_IN_VOIDING"

	TransportStatusERRORONCONFIRMING TransportStatus = "ERROR_ON_CONFIRMING"

	TransportStatusERRORONESTIMATING TransportStatus = "ERROR_ON_ESTIMATING"

	TransportStatusESTIMATED TransportStatus = "ESTIMATED"

	TransportStatusESTIMATING TransportStatus = "ESTIMATING"

	TransportStatusVOIDED TransportStatus = "VOIDED"

	TransportStatusVOIDING TransportStatus = "VOIDING"

	TransportStatusWORKING TransportStatus = "WORKING"
)

// Defines values for UnitOfMeasurement.
const (
	UnitOfMeasurementCentimeters UnitOfMeasurement = "centimeters"

	UnitOfMeasurementInches UnitOfMeasurement = "inches"
)

// Defines values for UnitOfWeight.
const (
	UnitOfWeightKilograms UnitOfWeight = "kilograms"

	UnitOfWeightPounds UnitOfWeight = "pounds"
)

// Reasons why a given ASIN is not recommended for shipment to Amazon's fulfillment network.
type ASINInboundGuidance struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN"`

	// A list of inbound guidance reason information.
	GuidanceReasonList *GuidanceReasonList `json:"GuidanceReasonList,omitempty"`

	// Specific inbound guidance for an item.
	InboundGuidance InboundGuidance `json:"InboundGuidance"`
}

// A list of ASINs and their associated inbound guidance.
type ASINInboundGuidanceList []ASINInboundGuidance

// Item preparation instructions to help with item sourcing decisions.
type ASINPrepInstructions struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN *string `json:"ASIN,omitempty"`

	// Labeling requirements for the item. For more information about FBA labeling requirements, see the Seller Central Help for your marketplace.
	BarcodeInstruction *BarcodeInstruction `json:"BarcodeInstruction,omitempty"`

	// Item preparation instructions.
	PrepGuidance *PrepGuidance `json:"PrepGuidance,omitempty"`

	// A list of preparation instructions to help with item sourcing decisions.
	PrepInstructionList *PrepInstructionList `json:"PrepInstructionList,omitempty"`
}

// A list of item preparation instructions.
type ASINPrepInstructionsList []ASINPrepInstructions

// Address defines model for Address.
type Address struct {

	// The street address information.
	AddressLine1 string `json:"AddressLine1"`

	// Additional street address information, if required.
	AddressLine2 *string `json:"AddressLine2,omitempty"`

	// The city.
	City string `json:"City"`

	// The country code in two-character ISO 3166-1 alpha-2 format.
	CountryCode string `json:"CountryCode"`

	// The district or county.
	DistrictOrCounty *string `json:"DistrictOrCounty,omitempty"`

	// Name of the individual or business.
	Name string `json:"Name"`

	// The postal code.
	//
	// If postal codes are used in your marketplace, we recommended that you include one with your request. This helps Amazon select the most appropriate Amazon fulfillment center for the inbound shipment plan.
	PostalCode string `json:"PostalCode"`

	// The state or province code.
	//
	// If state or province codes are used in your marketplace, it is recommended that you include one with your request. This helps Amazon to select the most appropriate Amazon fulfillment center for your inbound shipment plan.
	StateOrProvinceCode string `json:"StateOrProvinceCode"`
}

// The fees for Amazon to prep goods for shipment.
type AmazonPrepFeesDetails struct {

	// The monetary value.
	FeePerUnit *Amount `json:"FeePerUnit,omitempty"`

	// Preparation instructions for shipping an item to Amazon's fulfillment network. For more information about preparing items for shipment to Amazon's fulfillment network, see the Seller Central Help for your marketplace.
	PrepInstruction *PrepInstruction `json:"PrepInstruction,omitempty"`
}

// A list of preparation instructions and fees for Amazon to prep goods for shipment.
type AmazonPrepFeesDetailsList []AmazonPrepFeesDetails

// The monetary value.
type Amount struct {

	// The currency code.
	CurrencyCode CurrencyCode   `json:"CurrencyCode"`
	Value        BigDecimalType `json:"Value"`
}

// Labeling requirements for the item. For more information about FBA labeling requirements, see the Seller Central Help for your marketplace.
type BarcodeInstruction string

// BigDecimalType defines model for BigDecimalType.
type BigDecimalType float64

// BillOfLadingDownloadURL defines model for BillOfLadingDownloadURL.
type BillOfLadingDownloadURL struct {

	// URL to download the bill of lading for the package. Note: The URL will only be valid for 15 seconds
	DownloadURL *string `json:"DownloadURL,omitempty"`
}

// The manual processing fee per unit and total fee for a shipment.
type BoxContentsFeeDetails struct {

	// The monetary value.
	FeePerUnit *Amount `json:"FeePerUnit,omitempty"`

	// The monetary value.
	TotalFee *Amount `json:"TotalFee,omitempty"`

	// The item quantity.
	TotalUnits *Quantity `json:"TotalUnits,omitempty"`
}

// Where the seller provided box contents information for a shipment.
type BoxContentsSource string

// CommonTransportResult defines model for CommonTransportResult.
type CommonTransportResult struct {

	// The workflow status for a shipment with an Amazon-partnered carrier.
	TransportResult *TransportResult `json:"TransportResult,omitempty"`
}

// The condition of the item.
type Condition string

// The response schema for the confirmPreorder operation.
type ConfirmPreorderResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList             `json:"errors,omitempty"`
	Payload *ConfirmPreorderResult `json:"payload,omitempty"`
}

// ConfirmPreorderResult defines model for ConfirmPreorderResult.
type ConfirmPreorderResult struct {
	ConfirmedFulfillableDate *DateStringType `json:"ConfirmedFulfillableDate,omitempty"`
	ConfirmedNeedByDate      *DateStringType `json:"ConfirmedNeedByDate,omitempty"`
}

// The response schema for the confirmTransport operation.
type ConfirmTransportResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList             `json:"errors,omitempty"`
	Payload *CommonTransportResult `json:"payload,omitempty"`
}

// Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment.
type Contact struct {

	// The email address of the contact person.
	Email string `json:"Email"`

	// The fax number of the contact person.
	Fax *string `json:"Fax,omitempty"`

	// The name of the contact person.
	Name string `json:"Name"`

	// The phone number of the contact person.
	Phone string `json:"Phone"`
}

// The request schema for the createInboundShipmentPlan operation.
type CreateInboundShipmentPlanRequest struct {
	InboundShipmentPlanRequestItems InboundShipmentPlanRequestItemList `json:"InboundShipmentPlanRequestItems"`

	// The preference for label preparation for an inbound shipment.
	LabelPrepPreference LabelPrepPreference `json:"LabelPrepPreference"`
	ShipFromAddress     Address             `json:"ShipFromAddress"`

	// The two-character country code for the country where the inbound shipment is to be sent.
	//
	// Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
	//
	//  Values:
	//
	//  ShipToCountryCode values for North America:
	//  * CA – Canada
	//  * MX - Mexico
	//  * US - United States
	//
	// ShipToCountryCode values for MCI sellers in Europe:
	//  * DE – Germany
	//  * ES – Spain
	//  * FR – France
	//  * GB – United Kingdom
	//  * IT – Italy
	//
	// Default: The country code for the seller's home marketplace.
	ShipToCountryCode *string `json:"ShipToCountryCode,omitempty"`

	// The two-character country code, followed by a dash and then up to three characters that represent the subdivision of the country where the inbound shipment is to be sent. For example, "IN-MH". In full ISO 3166-2 format.
	//
	// Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
	ShipToCountrySubdivisionCode *string `json:"ShipToCountrySubdivisionCode,omitempty"`
}

// The response schema for the createInboundShipmentPlan operation.
type CreateInboundShipmentPlanResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList                       `json:"errors,omitempty"`
	Payload *CreateInboundShipmentPlanResult `json:"payload,omitempty"`
}

// CreateInboundShipmentPlanResult defines model for CreateInboundShipmentPlanResult.
type CreateInboundShipmentPlanResult struct {

	// A list of inbound shipment plan information
	InboundShipmentPlans *InboundShipmentPlanList `json:"InboundShipmentPlans,omitempty"`
}

// The currency code.
type CurrencyCode string

// DateStringType defines model for DateStringType.
type DateStringType openapi_types.Date

// The dimension values and unit of measurement.
type Dimensions struct {
	Height BigDecimalType `json:"Height"`
	Length BigDecimalType `json:"Length"`

	// Indicates the unit of measurement.
	Unit  UnitOfMeasurement `json:"Unit"`
	Width BigDecimalType    `json:"Width"`
}

// Error response returned when the request is unsuccessful.
type Error struct {

	// An error code that identifies the type of error that occured.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition in a human-readable form.
	Message string `json:"message"`
}

// A list of error responses returned when a request is unsuccessful.
type ErrorList []Error

// The reason that the ASIN is invalid.
type ErrorReason string

// The response schema for the estimateTransport operation.
type EstimateTransportResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList             `json:"errors,omitempty"`
	Payload *CommonTransportResult `json:"payload,omitempty"`
}

// The response schema for the getBillOfLading operation.
type GetBillOfLadingResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList               `json:"errors,omitempty"`
	Payload *BillOfLadingDownloadURL `json:"payload,omitempty"`
}

// The response schema for the getInboundGuidance operation.
type GetInboundGuidanceResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList                `json:"errors,omitempty"`
	Payload *GetInboundGuidanceResult `json:"payload,omitempty"`
}

// GetInboundGuidanceResult defines model for GetInboundGuidanceResult.
type GetInboundGuidanceResult struct {

	// A list of ASINs and their associated inbound guidance.
	ASINInboundGuidanceList *ASINInboundGuidanceList `json:"ASINInboundGuidanceList,omitempty"`

	// A list of invalid ASIN values and the reasons they are invalid.
	InvalidASINList *InvalidASINList `json:"InvalidASINList,omitempty"`

	// A list of invalid SKU values and the reason they are invalid.
	InvalidSKUList *InvalidSKUList `json:"InvalidSKUList,omitempty"`

	// A list of SKU inbound guidance information.
	SKUInboundGuidanceList *SKUInboundGuidanceList `json:"SKUInboundGuidanceList,omitempty"`
}

// The response schema for the getLabels operation.
type GetLabelsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList        `json:"errors,omitempty"`
	Payload *LabelDownloadURL `json:"payload,omitempty"`
}

// The response schema for the getPreorderInfo operation.
type GetPreorderInfoResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList             `json:"errors,omitempty"`
	Payload *GetPreorderInfoResult `json:"payload,omitempty"`
}

// GetPreorderInfoResult defines model for GetPreorderInfoResult.
type GetPreorderInfoResult struct {
	ConfirmedFulfillableDate *DateStringType `json:"ConfirmedFulfillableDate,omitempty"`
	NeedByDate               *DateStringType `json:"NeedByDate,omitempty"`

	// Indicates whether this shipment has been confirmed for pre-order.
	ShipmentConfirmedForPreorder *bool `json:"ShipmentConfirmedForPreorder,omitempty"`

	// Indicates whether the shipment contains items that have been enabled for pre-order. For more information about enabling items for pre-order, see the Seller Central Help.
	ShipmentContainsPreorderableItems *bool `json:"ShipmentContainsPreorderableItems,omitempty"`
}

// The response schema for the getPrepInstructions operation.
type GetPrepInstructionsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList                 `json:"errors,omitempty"`
	Payload *GetPrepInstructionsResult `json:"payload,omitempty"`
}

// GetPrepInstructionsResult defines model for GetPrepInstructionsResult.
type GetPrepInstructionsResult struct {

	// A list of item preparation instructions.
	ASINPrepInstructionsList *ASINPrepInstructionsList `json:"ASINPrepInstructionsList,omitempty"`

	// A list of invalid ASIN values and the reasons they are invalid.
	InvalidASINList *InvalidASINList `json:"InvalidASINList,omitempty"`

	// A list of invalid SKU values and the reason they are invalid.
	InvalidSKUList *InvalidSKUList `json:"InvalidSKUList,omitempty"`

	// A list of SKU labeling requirements and item preparation instructions.
	SKUPrepInstructionsList *SKUPrepInstructionsList `json:"SKUPrepInstructionsList,omitempty"`
}

// The response schema for the getShipmentItems operation.
type GetShipmentItemsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList              `json:"errors,omitempty"`
	Payload *GetShipmentItemsResult `json:"payload,omitempty"`
}

// GetShipmentItemsResult defines model for GetShipmentItemsResult.
type GetShipmentItemsResult struct {

	// A list of inbound shipment item information.
	ItemData *InboundShipmentItemList `json:"ItemData,omitempty"`

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken *string `json:"NextToken,omitempty"`
}

// The response schema for the getShipments operation.
type GetShipmentsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList          `json:"errors,omitempty"`
	Payload *GetShipmentsResult `json:"payload,omitempty"`
}

// GetShipmentsResult defines model for GetShipmentsResult.
type GetShipmentsResult struct {

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken *string `json:"NextToken,omitempty"`

	// A list of inbound shipment information.
	ShipmentData *InboundShipmentList `json:"ShipmentData,omitempty"`
}

// The response schema for the getTransportDetails operation.
type GetTransportDetailsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList                 `json:"errors,omitempty"`
	Payload *GetTransportDetailsResult `json:"payload,omitempty"`
}

// GetTransportDetailsResult defines model for GetTransportDetailsResult.
type GetTransportDetailsResult struct {

	// Inbound shipment information, including carrier details, shipment status, and the workflow status for a request for shipment with an Amazon-partnered carrier.
	TransportContent *TransportContent `json:"TransportContent,omitempty"`
}

// A reason for the current inbound guidance for an item.
type GuidanceReason string

// A list of inbound guidance reason information.
type GuidanceReasonList []GuidanceReason

// Specific inbound guidance for an item.
type InboundGuidance string

// Inbound shipment information used to create and update inbound shipments.
type InboundShipmentHeader struct {

	// Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.
	//
	// Possible values:
	//
	// true - All boxes in the shipment must be case packed.
	//
	// false - All boxes in the shipment must be individually packed.
	//
	// Note: If AreCasesRequired = true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error.
	AreCasesRequired *bool `json:"AreCasesRequired,omitempty"`

	// The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.
	DestinationFulfillmentCenterId string `json:"DestinationFulfillmentCenterId"`

	// How the seller intends to provide box contents information for a shipment.
	IntendedBoxContentsSource *IntendedBoxContentsSource `json:"IntendedBoxContentsSource,omitempty"`

	// The preference for label preparation for an inbound shipment.
	LabelPrepPreference LabelPrepPreference `json:"LabelPrepPreference"`
	ShipFromAddress     Address             `json:"ShipFromAddress"`

	// The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created.
	ShipmentName string `json:"ShipmentName"`

	// Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED.
	ShipmentStatus ShipmentStatus `json:"ShipmentStatus"`
}

// Information about the seller's inbound shipments. Returned by the listInboundShipments operation.
type InboundShipmentInfo struct {

	// Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired = true for an inbound shipment, all items in the inbound shipment must be case packed.
	AreCasesRequired bool `json:"AreCasesRequired"`

	// Where the seller provided box contents information for a shipment.
	BoxContentsSource   *BoxContentsSource `json:"BoxContentsSource,omitempty"`
	ConfirmedNeedByDate *DateStringType    `json:"ConfirmedNeedByDate,omitempty"`

	// An Amazon fulfillment center identifier created by Amazon.
	DestinationFulfillmentCenterId *string `json:"DestinationFulfillmentCenterId,omitempty"`

	// The manual processing fee per unit and total fee for a shipment.
	EstimatedBoxContentsFee *BoxContentsFeeDetails `json:"EstimatedBoxContentsFee,omitempty"`

	// The type of label preparation that is required for the inbound shipment.
	LabelPrepType   *LabelPrepType `json:"LabelPrepType,omitempty"`
	ShipFromAddress Address        `json:"ShipFromAddress"`

	// The shipment identifier submitted in the request.
	ShipmentId *string `json:"ShipmentId,omitempty"`

	// The name for the inbound shipment.
	ShipmentName *string `json:"ShipmentName,omitempty"`

	// Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED.
	ShipmentStatus *ShipmentStatus `json:"ShipmentStatus,omitempty"`
}

// Item information for an inbound shipment. Submitted with a call to the createInboundShipment or updateInboundShipment operation.
type InboundShipmentItem struct {

	// Amazon's fulfillment network SKU of the item.
	FulfillmentNetworkSKU *string `json:"FulfillmentNetworkSKU,omitempty"`

	// A list of preparation instructions and who is responsible for that preparation.
	PrepDetailsList *PrepDetailsList `json:"PrepDetailsList,omitempty"`

	// The item quantity.
	QuantityInCase *Quantity `json:"QuantityInCase,omitempty"`

	// The item quantity.
	QuantityReceived *Quantity `json:"QuantityReceived,omitempty"`

	// The item quantity.
	QuantityShipped Quantity        `json:"QuantityShipped"`
	ReleaseDate     *DateStringType `json:"ReleaseDate,omitempty"`

	// The seller SKU of the item.
	SellerSKU string `json:"SellerSKU"`

	// A shipment identifier originally returned by the createInboundShipmentPlan operation.
	ShipmentId *string `json:"ShipmentId,omitempty"`
}

// A list of inbound shipment item information.
type InboundShipmentItemList []InboundShipmentItem

// A list of inbound shipment information.
type InboundShipmentList []InboundShipmentInfo

// Inbound shipment information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation.
type InboundShipmentPlan struct {

	// An Amazon fulfillment center identifier created by Amazon.
	DestinationFulfillmentCenterId string `json:"DestinationFulfillmentCenterId"`

	// The manual processing fee per unit and total fee for a shipment.
	EstimatedBoxContentsFee *BoxContentsFeeDetails `json:"EstimatedBoxContentsFee,omitempty"`

	// A list of inbound shipment plan item information.
	Items InboundShipmentPlanItemList `json:"Items"`

	// The type of label preparation that is required for the inbound shipment.
	LabelPrepType LabelPrepType `json:"LabelPrepType"`
	ShipToAddress Address       `json:"ShipToAddress"`

	// A shipment identifier originally returned by the createInboundShipmentPlan operation.
	ShipmentId string `json:"ShipmentId"`
}

// Item information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation.
type InboundShipmentPlanItem struct {

	// Amazon's fulfillment network SKU of the item.
	FulfillmentNetworkSKU string `json:"FulfillmentNetworkSKU"`

	// A list of preparation instructions and who is responsible for that preparation.
	PrepDetailsList *PrepDetailsList `json:"PrepDetailsList,omitempty"`

	// The item quantity.
	Quantity Quantity `json:"Quantity"`

	// The seller SKU of the item.
	SellerSKU string `json:"SellerSKU"`
}

// A list of inbound shipment plan item information.
type InboundShipmentPlanItemList []InboundShipmentPlanItem

// A list of inbound shipment plan information
type InboundShipmentPlanList []InboundShipmentPlan

// Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan operation.
type InboundShipmentPlanRequestItem struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN"`

	// The condition of the item.
	Condition Condition `json:"Condition"`

	// A list of preparation instructions and who is responsible for that preparation.
	PrepDetailsList *PrepDetailsList `json:"PrepDetailsList,omitempty"`

	// The item quantity.
	Quantity Quantity `json:"Quantity"`

	// The item quantity.
	QuantityInCase *Quantity `json:"QuantityInCase,omitempty"`

	// The seller SKU of the item.
	SellerSKU string `json:"SellerSKU"`
}

// InboundShipmentPlanRequestItemList defines model for InboundShipmentPlanRequestItemList.
type InboundShipmentPlanRequestItemList []InboundShipmentPlanRequestItem

// The request schema for an inbound shipment.
type InboundShipmentRequest struct {

	// Inbound shipment information used to create and update inbound shipments.
	InboundShipmentHeader InboundShipmentHeader `json:"InboundShipmentHeader"`

	// A list of inbound shipment item information.
	InboundShipmentItems InboundShipmentItemList `json:"InboundShipmentItems"`

	// A marketplace identifier. Specifies the marketplace where the product would be stored.
	MarketplaceId string `json:"MarketplaceId"`
}

// The response schema for this operation.
type InboundShipmentResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList             `json:"errors,omitempty"`
	Payload *InboundShipmentResult `json:"payload,omitempty"`
}

// InboundShipmentResult defines model for InboundShipmentResult.
type InboundShipmentResult struct {

	// The shipment identifier submitted in the request.
	ShipmentId string `json:"ShipmentId"`
}

// How the seller intends to provide box contents information for a shipment.
type IntendedBoxContentsSource string

// InvalidASIN defines model for InvalidASIN.
type InvalidASIN struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN *string `json:"ASIN,omitempty"`

	// The reason that the ASIN is invalid.
	ErrorReason *ErrorReason `json:"ErrorReason,omitempty"`
}

// A list of invalid ASIN values and the reasons they are invalid.
type InvalidASINList []InvalidASIN

// InvalidSKU defines model for InvalidSKU.
type InvalidSKU struct {

	// The reason that the ASIN is invalid.
	ErrorReason *ErrorReason `json:"ErrorReason,omitempty"`

	// The seller SKU of the item.
	SellerSKU *string `json:"SellerSKU,omitempty"`
}

// A list of invalid SKU values and the reason they are invalid.
type InvalidSKUList []InvalidSKU

// LabelDownloadURL defines model for LabelDownloadURL.
type LabelDownloadURL struct {

	// URL to download the label for the package. Note: The URL will only be valid for 15 seconds
	DownloadURL *string `json:"DownloadURL,omitempty"`
}

// The preference for label preparation for an inbound shipment.
type LabelPrepPreference string

// The type of label preparation that is required for the inbound shipment.
type LabelPrepType string

// Information that you provide to Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by a carrier that has not partnered with Amazon.
type NonPartneredLtlDataInput struct {

	// The carrier that you are using for the inbound shipment.
	CarrierName string `json:"CarrierName"`

	// The PRO number ("progressive number" or "progressive ID") assigned to the shipment by the carrier.
	ProNumber ProNumber `json:"ProNumber"`
}

// Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment shipped by a carrier that has not partnered with Amazon.
type NonPartneredLtlDataOutput struct {

	// The carrier that you are using for the inbound shipment.
	CarrierName string `json:"CarrierName"`

	// The PRO number ("progressive number" or "progressive ID") assigned to the shipment by the carrier.
	ProNumber ProNumber `json:"ProNumber"`
}

// Information that you provide to Amazon about a Small Parcel shipment shipped by a carrier that has not partnered with Amazon.
type NonPartneredSmallParcelDataInput struct {

	// The carrier that you are using for the inbound shipment.
	CarrierName string `json:"CarrierName"`

	// A list of package tracking information.
	PackageList NonPartneredSmallParcelPackageInputList `json:"PackageList"`
}

// Information returned by Amazon about a Small Parcel shipment by a carrier that has not partnered with Amazon.
type NonPartneredSmallParcelDataOutput struct {

	// A list of packages, including carrier, tracking number, and status information for each package.
	PackageList NonPartneredSmallParcelPackageOutputList `json:"PackageList"`
}

// The tracking number of the package, provided by the carrier.
type NonPartneredSmallParcelPackageInput struct {

	// The tracking number of the package, provided by the carrier.
	TrackingId TrackingId `json:"TrackingId"`
}

// A list of package tracking information.
type NonPartneredSmallParcelPackageInputList []NonPartneredSmallParcelPackageInput

// Carrier, tracking number, and status information for the package.
type NonPartneredSmallParcelPackageOutput struct {

	// The carrier that you are using for the inbound shipment.
	CarrierName string `json:"CarrierName"`

	// The shipment status of the package.
	PackageStatus PackageStatus `json:"PackageStatus"`

	// The tracking number of the package, provided by the carrier.
	TrackingId TrackingId `json:"TrackingId"`
}

// A list of packages, including carrier, tracking number, and status information for each package.
type NonPartneredSmallParcelPackageOutputList []NonPartneredSmallParcelPackageOutput

// The shipment status of the package.
type PackageStatus string

// Pallet information.
type Pallet struct {

	// The dimension values and unit of measurement.
	Dimensions Dimensions `json:"Dimensions"`

	// Indicates whether pallets will be stacked when carrier arrives for pick-up.
	IsStacked bool `json:"IsStacked"`

	// The weight of the package.
	Weight *Weight `json:"Weight,omitempty"`
}

// A list of pallet information.
type PalletList []Pallet

// The estimated shipping cost for a shipment using an Amazon-partnered carrier.
type PartneredEstimate struct {

	// The monetary value.
	Amount          Amount               `json:"Amount"`
	ConfirmDeadline *TimeStampStringType `json:"ConfirmDeadline,omitempty"`
	VoidDeadline    *TimeStampStringType `json:"VoidDeadline,omitempty"`
}

// Information that is required by an Amazon-partnered carrier to ship a Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
type PartneredLtlDataInput struct {
	BoxCount *UnsignedIntType `json:"BoxCount,omitempty"`

	// Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment.
	Contact          *Contact        `json:"Contact,omitempty"`
	FreightReadyDate *DateStringType `json:"FreightReadyDate,omitempty"`

	// A list of pallet information.
	PalletList *PalletList `json:"PalletList,omitempty"`

	// The monetary value.
	SellerDeclaredValue *Amount `json:"SellerDeclaredValue,omitempty"`

	// The freight class of the shipment. For information about determining the freight class, contact the carrier.
	SellerFreightClass *SellerFreightClass `json:"SellerFreightClass,omitempty"`

	// The weight of the package.
	TotalWeight *Weight `json:"TotalWeight,omitempty"`
}

// Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.
type PartneredLtlDataOutput struct {

	// The monetary value.
	AmazonCalculatedValue *Amount `json:"AmazonCalculatedValue,omitempty"`

	// A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
	AmazonReferenceId string          `json:"AmazonReferenceId"`
	BoxCount          UnsignedIntType `json:"BoxCount"`

	// The carrier for the inbound shipment.
	CarrierName string `json:"CarrierName"`

	// Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment.
	Contact          Contact        `json:"Contact"`
	FreightReadyDate DateStringType `json:"FreightReadyDate"`

	// Indicates whether the bill of lading for the shipment is available.
	IsBillOfLadingAvailable bool `json:"IsBillOfLadingAvailable"`

	// A list of pallet information.
	PalletList PalletList `json:"PalletList"`

	// The estimated shipping cost for a shipment using an Amazon-partnered carrier.
	PartneredEstimate   *PartneredEstimate `json:"PartneredEstimate,omitempty"`
	PreviewDeliveryDate DateStringType     `json:"PreviewDeliveryDate"`

	// The freight class of the shipment. For information about determining the freight class, contact the carrier.
	PreviewFreightClass SellerFreightClass `json:"PreviewFreightClass"`
	PreviewPickupDate   DateStringType     `json:"PreviewPickupDate"`

	// The monetary value.
	SellerDeclaredValue *Amount `json:"SellerDeclaredValue,omitempty"`

	// The freight class of the shipment. For information about determining the freight class, contact the carrier.
	SellerFreightClass *SellerFreightClass `json:"SellerFreightClass,omitempty"`

	// The weight of the package.
	TotalWeight Weight `json:"TotalWeight"`
}

// Information that is required by an Amazon-partnered carrier to ship a Small Parcel inbound shipment.
type PartneredSmallParcelDataInput struct {

	// The Amazon-partnered carrier to use for the inbound shipment.
	CarrierName *string `json:"CarrierName,omitempty"`

	// A list of dimensions and weight information for packages.
	PackageList *PartneredSmallParcelPackageInputList `json:"PackageList,omitempty"`
}

// Information returned by Amazon about a Small Parcel shipment by an Amazon-partnered carrier.
type PartneredSmallParcelDataOutput struct {

	// A list of packages, including shipping information from the Amazon-partnered carrier.
	PackageList PartneredSmallParcelPackageOutputList `json:"PackageList"`

	// The estimated shipping cost for a shipment using an Amazon-partnered carrier.
	PartneredEstimate *PartneredEstimate `json:"PartneredEstimate,omitempty"`
}

// Dimension and weight information for the package.
type PartneredSmallParcelPackageInput struct {

	// The dimension values and unit of measurement.
	Dimensions Dimensions `json:"Dimensions"`

	// The weight of the package.
	Weight Weight `json:"Weight"`
}

// A list of dimensions and weight information for packages.
type PartneredSmallParcelPackageInputList []PartneredSmallParcelPackageInput

// Dimension, weight, and shipping information for the package.
type PartneredSmallParcelPackageOutput struct {

	// The carrier specified with a previous call to putTransportDetails.
	CarrierName string `json:"CarrierName"`

	// The dimension values and unit of measurement.
	Dimensions Dimensions `json:"Dimensions"`

	// The shipment status of the package.
	PackageStatus PackageStatus `json:"PackageStatus"`

	// The tracking number of the package, provided by the carrier.
	TrackingId TrackingId `json:"TrackingId"`

	// The weight of the package.
	Weight Weight `json:"Weight"`
}

// A list of packages, including shipping information from the Amazon-partnered carrier.
type PartneredSmallParcelPackageOutputList []PartneredSmallParcelPackageOutput

// Preparation instructions and who is responsible for the preparation.
type PrepDetails struct {

	// Preparation instructions for shipping an item to Amazon's fulfillment network. For more information about preparing items for shipment to Amazon's fulfillment network, see the Seller Central Help for your marketplace.
	PrepInstruction PrepInstruction `json:"PrepInstruction"`

	// Indicates who will prepare the item.
	PrepOwner PrepOwner `json:"PrepOwner"`
}

// A list of preparation instructions and who is responsible for that preparation.
type PrepDetailsList []PrepDetails

// Item preparation instructions.
type PrepGuidance string

// Preparation instructions for shipping an item to Amazon's fulfillment network. For more information about preparing items for shipment to Amazon's fulfillment network, see the Seller Central Help for your marketplace.
type PrepInstruction string

// A list of preparation instructions to help with item sourcing decisions.
type PrepInstructionList []PrepInstruction

// Indicates who will prepare the item.
type PrepOwner string

// The PRO number ("progressive number" or "progressive ID") assigned to the shipment by the carrier.
type ProNumber string

// The request schema for a putTransportDetails operation.
type PutTransportDetailsRequest struct {

	// Indicates whether a putTransportDetails request is for an Amazon-partnered carrier.
	IsPartnered bool `json:"IsPartnered"`

	// Specifies the carrier shipment type in a putTransportDetails request.
	ShipmentType ShipmentType `json:"ShipmentType"`

	// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
	TransportDetails TransportDetailInput `json:"TransportDetails"`
}

// Workflow status for a shipment with an Amazon-partnered carrier.
type PutTransportDetailsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList             `json:"errors,omitempty"`
	Payload *CommonTransportResult `json:"payload,omitempty"`
}

// The item quantity.
type Quantity int32

// Reasons why a given seller SKU is not recommended for shipment to Amazon's fulfillment network.
type SKUInboundGuidance struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN"`

	// A list of inbound guidance reason information.
	GuidanceReasonList *GuidanceReasonList `json:"GuidanceReasonList,omitempty"`

	// Specific inbound guidance for an item.
	InboundGuidance InboundGuidance `json:"InboundGuidance"`

	// The seller SKU of the item.
	SellerSKU string `json:"SellerSKU"`
}

// A list of SKU inbound guidance information.
type SKUInboundGuidanceList []SKUInboundGuidance

// Labeling requirements and item preparation instructions to help you prepare items for shipment to Amazon's fulfillment network.
type SKUPrepInstructions struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN *string `json:"ASIN,omitempty"`

	// A list of preparation instructions and fees for Amazon to prep goods for shipment.
	AmazonPrepFeesDetailsList *AmazonPrepFeesDetailsList `json:"AmazonPrepFeesDetailsList,omitempty"`

	// Labeling requirements for the item. For more information about FBA labeling requirements, see the Seller Central Help for your marketplace.
	BarcodeInstruction *BarcodeInstruction `json:"BarcodeInstruction,omitempty"`

	// Item preparation instructions.
	PrepGuidance *PrepGuidance `json:"PrepGuidance,omitempty"`

	// A list of preparation instructions to help with item sourcing decisions.
	PrepInstructionList *PrepInstructionList `json:"PrepInstructionList,omitempty"`

	// The seller SKU of the item.
	SellerSKU *string `json:"SellerSKU,omitempty"`
}

// A list of SKU labeling requirements and item preparation instructions.
type SKUPrepInstructionsList []SKUPrepInstructions

// The freight class of the shipment. For information about determining the freight class, contact the carrier.
type SellerFreightClass string

// Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED.
type ShipmentStatus string

// Specifies the carrier shipment type in a putTransportDetails request.
type ShipmentType string

// TimeStampStringType defines model for TimeStampStringType.
type TimeStampStringType time.Time

// The tracking number of the package, provided by the carrier.
type TrackingId string

// Inbound shipment information, including carrier details, shipment status, and the workflow status for a request for shipment with an Amazon-partnered carrier.
type TransportContent struct {

	// Inbound shipment information, including carrier details and shipment status.
	TransportDetails TransportDetailOutput `json:"TransportDetails"`

	// The shipping identifier, information about whether the shipment is by an Amazon-partnered carrier, and information about whether the shipment is Small Parcel or Less Than Truckload/Full Truckload (LTL/FTL).
	TransportHeader TransportHeader `json:"TransportHeader"`

	// The workflow status for a shipment with an Amazon-partnered carrier.
	TransportResult TransportResult `json:"TransportResult"`
}

// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
type TransportDetailInput struct {

	// Information that you provide to Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by a carrier that has not partnered with Amazon.
	NonPartneredLtlData *NonPartneredLtlDataInput `json:"NonPartneredLtlData,omitempty"`

	// Information that you provide to Amazon about a Small Parcel shipment shipped by a carrier that has not partnered with Amazon.
	NonPartneredSmallParcelData *NonPartneredSmallParcelDataInput `json:"NonPartneredSmallParcelData,omitempty"`

	// Information that is required by an Amazon-partnered carrier to ship a Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
	PartneredLtlData *PartneredLtlDataInput `json:"PartneredLtlData,omitempty"`

	// Information that is required by an Amazon-partnered carrier to ship a Small Parcel inbound shipment.
	PartneredSmallParcelData *PartneredSmallParcelDataInput `json:"PartneredSmallParcelData,omitempty"`
}

// Inbound shipment information, including carrier details and shipment status.
type TransportDetailOutput struct {

	// Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment shipped by a carrier that has not partnered with Amazon.
	NonPartneredLtlData *NonPartneredLtlDataOutput `json:"NonPartneredLtlData,omitempty"`

	// Information returned by Amazon about a Small Parcel shipment by a carrier that has not partnered with Amazon.
	NonPartneredSmallParcelData *NonPartneredSmallParcelDataOutput `json:"NonPartneredSmallParcelData,omitempty"`

	// Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.
	PartneredLtlData *PartneredLtlDataOutput `json:"PartneredLtlData,omitempty"`

	// Information returned by Amazon about a Small Parcel shipment by an Amazon-partnered carrier.
	PartneredSmallParcelData *PartneredSmallParcelDataOutput `json:"PartneredSmallParcelData,omitempty"`
}

// The shipping identifier, information about whether the shipment is by an Amazon-partnered carrier, and information about whether the shipment is Small Parcel or Less Than Truckload/Full Truckload (LTL/FTL).
type TransportHeader struct {

	// Indicates whether a putTransportDetails request is for a partnered carrier.
	//
	// Possible values:
	//
	// * true – Request is for an Amazon-partnered carrier.
	//
	// * false – Request is for a non-Amazon-partnered carrier.
	IsPartnered bool `json:"IsPartnered"`

	// The Amazon seller identifier.
	SellerId string `json:"SellerId"`

	// A shipment identifier originally returned by the createInboundShipmentPlan operation.
	ShipmentId string `json:"ShipmentId"`

	// Specifies the carrier shipment type in a putTransportDetails request.
	ShipmentType ShipmentType `json:"ShipmentType"`
}

// The workflow status for a shipment with an Amazon-partnered carrier.
type TransportResult struct {

	// An error code that identifies the type of error that occured.
	ErrorCode *string `json:"ErrorCode,omitempty"`

	// A message that describes the error condition.
	ErrorDescription *string `json:"ErrorDescription,omitempty"`

	// Indicates the status of the Amazon-partnered carrier shipment.
	TransportStatus TransportStatus `json:"TransportStatus"`
}

// Indicates the status of the Amazon-partnered carrier shipment.
type TransportStatus string

// Indicates the unit of measurement.
type UnitOfMeasurement string

// Indicates the unit of weight.
type UnitOfWeight string

// UnsignedIntType defines model for UnsignedIntType.
type UnsignedIntType int64

// The response schema for the voidTransport operation.
type VoidTransportResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList             `json:"errors,omitempty"`
	Payload *CommonTransportResult `json:"payload,omitempty"`
}

// The weight of the package.
type Weight struct {

	// Indicates the unit of weight.
	Unit  UnitOfWeight   `json:"Unit"`
	Value BigDecimalType `json:"Value"`
}

// GetInboundGuidanceParams defines parameters for GetInboundGuidance.
type GetInboundGuidanceParams struct {

	// A marketplace identifier. Specifies the marketplace where the product would be stored.
	MarketplaceId string `json:"MarketplaceId"`

	// A list of SellerSKU values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: SellerSKU is qualified by the SellerId, which is included with every Selling Partner API operation that you submit. If you specify a SellerSKU that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.
	SellerSKUList *[]string `json:"SellerSKUList,omitempty"`

	// A list of ASIN values. Used to identify items for which you want inbound guidance for shipment to Amazon's fulfillment network. Note: If you specify a ASIN that identifies a variation parent ASIN, this operation returns an error. A variation parent ASIN represents a generic product that cannot be sold. Variation child ASINs represent products that have specific characteristics (such as size and color) and can be sold.
	ASINList *[]string `json:"ASINList,omitempty"`
}

// CreateInboundShipmentPlanJSONBody defines parameters for CreateInboundShipmentPlan.
type CreateInboundShipmentPlanJSONBody CreateInboundShipmentPlanRequest

// GetPrepInstructionsParams defines parameters for GetPrepInstructions.
type GetPrepInstructionsParams struct {

	// The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.
	ShipToCountryCode string `json:"ShipToCountryCode"`

	// A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.
	//
	// Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.
	SellerSKUList *[]string `json:"SellerSKUList,omitempty"`

	// A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.
	//
	// Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.
	ASINList *[]string `json:"ASINList,omitempty"`
}

// GetShipmentItemsParams defines parameters for GetShipmentItems.
type GetShipmentItemsParams struct {

	// A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
	LastUpdatedAfter *time.Time `json:"LastUpdatedAfter,omitempty"`

	// A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
	LastUpdatedBefore *time.Time `json:"LastUpdatedBefore,omitempty"`

	// Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.
	QueryType GetShipmentItemsParamsQueryType `json:"QueryType"`

	// A string token returned in the response to your previous request.
	NextToken *string `json:"NextToken,omitempty"`

	// A marketplace identifier. Specifies the marketplace where the product would be stored.
	MarketplaceId string `json:"MarketplaceId"`
}

// GetShipmentItemsParamsQueryType defines parameters for GetShipmentItems.
type GetShipmentItemsParamsQueryType string

// GetShipmentsParams defines parameters for GetShipments.
type GetShipmentsParams struct {

	// A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify.
	ShipmentStatusList *[]GetShipmentsParamsShipmentStatusList `json:"ShipmentStatusList,omitempty"`

	// A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
	ShipmentIdList *[]string `json:"ShipmentIdList,omitempty"`

	// A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller.
	LastUpdatedAfter *time.Time `json:"LastUpdatedAfter,omitempty"`

	// A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller.
	LastUpdatedBefore *time.Time `json:"LastUpdatedBefore,omitempty"`

	// Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.
	QueryType GetShipmentsParamsQueryType `json:"QueryType"`

	// A string token returned in the response to your previous request.
	NextToken *string `json:"NextToken,omitempty"`

	// A marketplace identifier. Specifies the marketplace where the product would be stored.
	MarketplaceId string `json:"MarketplaceId"`
}

// GetShipmentsParamsShipmentStatusList defines parameters for GetShipments.
type GetShipmentsParamsShipmentStatusList string

// GetShipmentsParamsQueryType defines parameters for GetShipments.
type GetShipmentsParamsQueryType string

// CreateInboundShipmentJSONBody defines parameters for CreateInboundShipment.
type CreateInboundShipmentJSONBody InboundShipmentRequest

// UpdateInboundShipmentJSONBody defines parameters for UpdateInboundShipment.
type UpdateInboundShipmentJSONBody InboundShipmentRequest

// GetShipmentItemsByShipmentIdParams defines parameters for GetShipmentItemsByShipmentId.
type GetShipmentItemsByShipmentIdParams struct {

	// A marketplace identifier. Specifies the marketplace where the product would be stored.
	MarketplaceId string `json:"MarketplaceId"`
}

// GetLabelsParams defines parameters for GetLabels.
type GetLabelsParams struct {

	// The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.
	PageType GetLabelsParamsPageType `json:"PageType"`

	// The type of labels requested.
	LabelType GetLabelsParamsLabelType `json:"LabelType"`

	// The number of packages in the shipment.
	NumberOfPackages *int `json:"NumberOfPackages,omitempty"`

	// A list of identifiers that specify packages for which you want package labels printed.
	//
	// Must match CartonId values previously passed using the FBA Inbound Shipment Carton Information Feed. If not, the operation returns the IncorrectPackageIdentifier error code.
	PackageLabelsToPrint *[]string `json:"PackageLabelsToPrint,omitempty"`

	// The number of pallets in the shipment. This returns four identical labels for each pallet.
	NumberOfPallets *int `json:"NumberOfPallets,omitempty"`

	// The page size for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000.
	PageSize *int `json:"PageSize,omitempty"`

	// The page start index for paginating through the total packages' labels. This is a required parameter for Non-Partnered LTL Shipments.
	PageStartIndex *int `json:"PageStartIndex,omitempty"`
}

// GetLabelsParamsPageType defines parameters for GetLabels.
type GetLabelsParamsPageType string

// GetLabelsParamsLabelType defines parameters for GetLabels.
type GetLabelsParamsLabelType string

// GetPreorderInfoParams defines parameters for GetPreorderInfo.
type GetPreorderInfoParams struct {

	// A marketplace identifier. Specifies the marketplace the shipment is tied to.
	MarketplaceId string `json:"MarketplaceId"`
}

// ConfirmPreorderParams defines parameters for ConfirmPreorder.
type ConfirmPreorderParams struct {

	// Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.
	NeedByDate openapi_types.Date `json:"NeedByDate"`

	// A marketplace identifier. Specifies the marketplace the shipment is tied to.
	MarketplaceId string `json:"MarketplaceId"`
}

// PutTransportDetailsJSONBody defines parameters for PutTransportDetails.
type PutTransportDetailsJSONBody PutTransportDetailsRequest

// CreateInboundShipmentPlanJSONRequestBody defines body for CreateInboundShipmentPlan for application/json ContentType.
type CreateInboundShipmentPlanJSONRequestBody CreateInboundShipmentPlanJSONBody

// CreateInboundShipmentJSONRequestBody defines body for CreateInboundShipment for application/json ContentType.
type CreateInboundShipmentJSONRequestBody CreateInboundShipmentJSONBody

// UpdateInboundShipmentJSONRequestBody defines body for UpdateInboundShipment for application/json ContentType.
type UpdateInboundShipmentJSONRequestBody UpdateInboundShipmentJSONBody

// PutTransportDetailsJSONRequestBody defines body for PutTransportDetails for application/json ContentType.
type PutTransportDetailsJSONRequestBody PutTransportDetailsJSONBody
