// Package fbaOutbound provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package fbaOutbound

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFeatures request
	GetFeatures(ctx context.Context, params *GetFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureInventory request
	GetFeatureInventory(ctx context.Context, featureName string, params *GetFeatureInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureSKU request
	GetFeatureSKU(ctx context.Context, featureName string, sellerSku string, params *GetFeatureSKUParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllFulfillmentOrders request
	ListAllFulfillmentOrders(ctx context.Context, params *ListAllFulfillmentOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFulfillmentOrder request  with any body
	CreateFulfillmentOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFulfillmentOrder(ctx context.Context, body CreateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFulfillmentPreview request  with any body
	GetFulfillmentPreviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFulfillmentPreview(ctx context.Context, body GetFulfillmentPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFulfillmentOrder request
	GetFulfillmentOrder(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFulfillmentOrder request  with any body
	UpdateFulfillmentOrderWithBody(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFulfillmentOrder(ctx context.Context, sellerFulfillmentOrderId string, body UpdateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelFulfillmentOrder request
	CancelFulfillmentOrder(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFulfillmentReturn request  with any body
	CreateFulfillmentReturnWithBody(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFulfillmentReturn(ctx context.Context, sellerFulfillmentOrderId string, body CreateFulfillmentReturnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListReturnReasonCodes request
	ListReturnReasonCodes(ctx context.Context, params *ListReturnReasonCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackageTrackingDetails request
	GetPackageTrackingDetails(ctx context.Context, params *GetPackageTrackingDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFeatures(ctx context.Context, params *GetFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureInventory(ctx context.Context, featureName string, params *GetFeatureInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureInventoryRequest(c.Server, featureName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureSKU(ctx context.Context, featureName string, sellerSku string, params *GetFeatureSKUParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureSKURequest(c.Server, featureName, sellerSku, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllFulfillmentOrders(ctx context.Context, params *ListAllFulfillmentOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllFulfillmentOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFulfillmentOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFulfillmentOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFulfillmentOrder(ctx context.Context, body CreateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFulfillmentOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFulfillmentPreviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFulfillmentPreviewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFulfillmentPreview(ctx context.Context, body GetFulfillmentPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFulfillmentPreviewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFulfillmentOrder(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFulfillmentOrderRequest(c.Server, sellerFulfillmentOrderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFulfillmentOrderWithBody(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFulfillmentOrderRequestWithBody(c.Server, sellerFulfillmentOrderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFulfillmentOrder(ctx context.Context, sellerFulfillmentOrderId string, body UpdateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFulfillmentOrderRequest(c.Server, sellerFulfillmentOrderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelFulfillmentOrder(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelFulfillmentOrderRequest(c.Server, sellerFulfillmentOrderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFulfillmentReturnWithBody(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFulfillmentReturnRequestWithBody(c.Server, sellerFulfillmentOrderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFulfillmentReturn(ctx context.Context, sellerFulfillmentOrderId string, body CreateFulfillmentReturnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFulfillmentReturnRequest(c.Server, sellerFulfillmentOrderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListReturnReasonCodes(ctx context.Context, params *ListReturnReasonCodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListReturnReasonCodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackageTrackingDetails(ctx context.Context, params *GetPackageTrackingDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackageTrackingDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFeaturesRequest generates requests for GetFeatures
func NewGetFeaturesRequest(server string, params *GetFeaturesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/features")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureInventoryRequest generates requests for GetFeatureInventory
func NewGetFeatureInventoryRequest(server string, featureName string, params *GetFeatureInventoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/features/inventory/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureSKURequest generates requests for GetFeatureSKU
func NewGetFeatureSKURequest(server string, featureName string, sellerSku string, params *GetFeatureSKUParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sellerSku", runtime.ParamLocationPath, sellerSku)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/features/inventory/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, params.MarketplaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAllFulfillmentOrdersRequest generates requests for ListAllFulfillmentOrders
func NewListAllFulfillmentOrdersRequest(server string, params *ListAllFulfillmentOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/fulfillmentOrders")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.QueryStartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "queryStartDate", runtime.ParamLocationQuery, *params.QueryStartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFulfillmentOrderRequest calls the generic CreateFulfillmentOrder builder with application/json body
func NewCreateFulfillmentOrderRequest(server string, body CreateFulfillmentOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFulfillmentOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFulfillmentOrderRequestWithBody generates requests for CreateFulfillmentOrder with any type of body
func NewCreateFulfillmentOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/fulfillmentOrders")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFulfillmentPreviewRequest calls the generic GetFulfillmentPreview builder with application/json body
func NewGetFulfillmentPreviewRequest(server string, body GetFulfillmentPreviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFulfillmentPreviewRequestWithBody(server, "application/json", bodyReader)
}

// NewGetFulfillmentPreviewRequestWithBody generates requests for GetFulfillmentPreview with any type of body
func NewGetFulfillmentPreviewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/fulfillmentOrders/preview")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFulfillmentOrderRequest generates requests for GetFulfillmentOrder
func NewGetFulfillmentOrderRequest(server string, sellerFulfillmentOrderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerFulfillmentOrderId", runtime.ParamLocationPath, sellerFulfillmentOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/fulfillmentOrders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFulfillmentOrderRequest calls the generic UpdateFulfillmentOrder builder with application/json body
func NewUpdateFulfillmentOrderRequest(server string, sellerFulfillmentOrderId string, body UpdateFulfillmentOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFulfillmentOrderRequestWithBody(server, sellerFulfillmentOrderId, "application/json", bodyReader)
}

// NewUpdateFulfillmentOrderRequestWithBody generates requests for UpdateFulfillmentOrder with any type of body
func NewUpdateFulfillmentOrderRequestWithBody(server string, sellerFulfillmentOrderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerFulfillmentOrderId", runtime.ParamLocationPath, sellerFulfillmentOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/fulfillmentOrders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelFulfillmentOrderRequest generates requests for CancelFulfillmentOrder
func NewCancelFulfillmentOrderRequest(server string, sellerFulfillmentOrderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerFulfillmentOrderId", runtime.ParamLocationPath, sellerFulfillmentOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/fulfillmentOrders/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFulfillmentReturnRequest calls the generic CreateFulfillmentReturn builder with application/json body
func NewCreateFulfillmentReturnRequest(server string, sellerFulfillmentOrderId string, body CreateFulfillmentReturnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFulfillmentReturnRequestWithBody(server, sellerFulfillmentOrderId, "application/json", bodyReader)
}

// NewCreateFulfillmentReturnRequestWithBody generates requests for CreateFulfillmentReturn with any type of body
func NewCreateFulfillmentReturnRequestWithBody(server string, sellerFulfillmentOrderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sellerFulfillmentOrderId", runtime.ParamLocationPath, sellerFulfillmentOrderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/fulfillmentOrders/%s/return", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListReturnReasonCodesRequest generates requests for ListReturnReasonCodes
func NewListReturnReasonCodesRequest(server string, params *ListReturnReasonCodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/returnReasonCodes")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sellerSku", runtime.ParamLocationQuery, params.SellerSku); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.MarketplaceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceId", runtime.ParamLocationQuery, *params.MarketplaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SellerFulfillmentOrderId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sellerFulfillmentOrderId", runtime.ParamLocationQuery, *params.SellerFulfillmentOrderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPackageTrackingDetailsRequest generates requests for GetPackageTrackingDetails
func NewGetPackageTrackingDetailsRequest(server string, params *GetPackageTrackingDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fba/outbound/2020-07-01/tracking")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "packageNumber", runtime.ParamLocationQuery, params.PackageNumber); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFeatures request
	GetFeaturesWithResponse(ctx context.Context, params *GetFeaturesParams, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error)

	// GetFeatureInventory request
	GetFeatureInventoryWithResponse(ctx context.Context, featureName string, params *GetFeatureInventoryParams, reqEditors ...RequestEditorFn) (*GetFeatureInventoryResponse, error)

	// GetFeatureSKU request
	GetFeatureSKUWithResponse(ctx context.Context, featureName string, sellerSku string, params *GetFeatureSKUParams, reqEditors ...RequestEditorFn) (*GetFeatureSKUResponse, error)

	// ListAllFulfillmentOrders request
	ListAllFulfillmentOrdersWithResponse(ctx context.Context, params *ListAllFulfillmentOrdersParams, reqEditors ...RequestEditorFn) (*ListAllFulfillmentOrdersResponse, error)

	// CreateFulfillmentOrder request  with any body
	CreateFulfillmentOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFulfillmentOrderResponse, error)

	CreateFulfillmentOrderWithResponse(ctx context.Context, body CreateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFulfillmentOrderResponse, error)

	// GetFulfillmentPreview request  with any body
	GetFulfillmentPreviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFulfillmentPreviewResponse, error)

	GetFulfillmentPreviewWithResponse(ctx context.Context, body GetFulfillmentPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFulfillmentPreviewResponse, error)

	// GetFulfillmentOrder request
	GetFulfillmentOrderWithResponse(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*GetFulfillmentOrderResponse, error)

	// UpdateFulfillmentOrder request  with any body
	UpdateFulfillmentOrderWithBodyWithResponse(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFulfillmentOrderResponse, error)

	UpdateFulfillmentOrderWithResponse(ctx context.Context, sellerFulfillmentOrderId string, body UpdateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFulfillmentOrderResponse, error)

	// CancelFulfillmentOrder request
	CancelFulfillmentOrderWithResponse(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*CancelFulfillmentOrderResponse, error)

	// CreateFulfillmentReturn request  with any body
	CreateFulfillmentReturnWithBodyWithResponse(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFulfillmentReturnResponse, error)

	CreateFulfillmentReturnWithResponse(ctx context.Context, sellerFulfillmentOrderId string, body CreateFulfillmentReturnJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFulfillmentReturnResponse, error)

	// ListReturnReasonCodes request
	ListReturnReasonCodesWithResponse(ctx context.Context, params *ListReturnReasonCodesParams, reqEditors ...RequestEditorFn) (*ListReturnReasonCodesResponse, error)

	// GetPackageTrackingDetails request
	GetPackageTrackingDetailsWithResponse(ctx context.Context, params *GetPackageTrackingDetailsParams, reqEditors ...RequestEditorFn) (*GetPackageTrackingDetailsResponse, error)
}

type GetFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFeaturesResponse
	JSON400      *GetFeaturesResponse
	JSON401      *GetFeaturesResponse
	JSON403      *GetFeaturesResponse
	JSON404      *GetFeaturesResponse
	JSON429      *GetFeaturesResponse
	JSON500      *GetFeaturesResponse
	JSON503      *GetFeaturesResponse
}

// Status returns HTTPResponse.Status
func (r GetFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFeatureInventoryResponse
	JSON400      *GetFeatureInventoryResponse
	JSON401      *GetFeatureInventoryResponse
	JSON403      *GetFeatureInventoryResponse
	JSON404      *GetFeatureInventoryResponse
	JSON429      *GetFeatureInventoryResponse
	JSON500      *GetFeatureInventoryResponse
	JSON503      *GetFeatureInventoryResponse
}

// Status returns HTTPResponse.Status
func (r GetFeatureInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureSKUResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFeatureSkuResponse
	JSON400      *GetFeatureSkuResponse
	JSON401      *GetFeatureSkuResponse
	JSON403      *GetFeatureSkuResponse
	JSON404      *GetFeatureSkuResponse
	JSON429      *GetFeatureSkuResponse
	JSON500      *GetFeatureSkuResponse
	JSON503      *GetFeatureSkuResponse
}

// Status returns HTTPResponse.Status
func (r GetFeatureSKUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureSKUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllFulfillmentOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAllFulfillmentOrdersResponse
	JSON400      *ListAllFulfillmentOrdersResponse
	JSON401      *ListAllFulfillmentOrdersResponse
	JSON403      *ListAllFulfillmentOrdersResponse
	JSON404      *ListAllFulfillmentOrdersResponse
	JSON429      *ListAllFulfillmentOrdersResponse
	JSON500      *ListAllFulfillmentOrdersResponse
	JSON503      *ListAllFulfillmentOrdersResponse
}

// Status returns HTTPResponse.Status
func (r ListAllFulfillmentOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllFulfillmentOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFulfillmentOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateFulfillmentOrderResponse
	JSON400      *CreateFulfillmentOrderResponse
	JSON401      *CreateFulfillmentOrderResponse
	JSON403      *CreateFulfillmentOrderResponse
	JSON404      *CreateFulfillmentOrderResponse
	JSON429      *CreateFulfillmentOrderResponse
	JSON500      *CreateFulfillmentOrderResponse
	JSON503      *CreateFulfillmentOrderResponse
}

// Status returns HTTPResponse.Status
func (r CreateFulfillmentOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFulfillmentOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFulfillmentPreviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFulfillmentPreviewResponse
	JSON400      *GetFulfillmentPreviewResponse
	JSON401      *GetFulfillmentPreviewResponse
	JSON403      *GetFulfillmentPreviewResponse
	JSON404      *GetFulfillmentPreviewResponse
	JSON429      *GetFulfillmentPreviewResponse
	JSON500      *GetFulfillmentPreviewResponse
	JSON503      *GetFulfillmentPreviewResponse
}

// Status returns HTTPResponse.Status
func (r GetFulfillmentPreviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFulfillmentPreviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFulfillmentOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFulfillmentOrderResponse
	JSON400      *GetFulfillmentOrderResponse
	JSON401      *GetFulfillmentOrderResponse
	JSON403      *GetFulfillmentOrderResponse
	JSON404      *GetFulfillmentOrderResponse
	JSON429      *GetFulfillmentOrderResponse
	JSON500      *GetFulfillmentOrderResponse
	JSON503      *GetFulfillmentOrderResponse
}

// Status returns HTTPResponse.Status
func (r GetFulfillmentOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFulfillmentOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFulfillmentOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateFulfillmentOrderResponse
	JSON400      *UpdateFulfillmentOrderResponse
	JSON401      *UpdateFulfillmentOrderResponse
	JSON403      *UpdateFulfillmentOrderResponse
	JSON404      *UpdateFulfillmentOrderResponse
	JSON429      *UpdateFulfillmentOrderResponse
	JSON500      *UpdateFulfillmentOrderResponse
	JSON503      *UpdateFulfillmentOrderResponse
}

// Status returns HTTPResponse.Status
func (r UpdateFulfillmentOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFulfillmentOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelFulfillmentOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelFulfillmentOrderResponse
	JSON400      *CancelFulfillmentOrderResponse
	JSON401      *CancelFulfillmentOrderResponse
	JSON403      *CancelFulfillmentOrderResponse
	JSON404      *CancelFulfillmentOrderResponse
	JSON429      *CancelFulfillmentOrderResponse
	JSON500      *CancelFulfillmentOrderResponse
	JSON503      *CancelFulfillmentOrderResponse
}

// Status returns HTTPResponse.Status
func (r CancelFulfillmentOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelFulfillmentOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFulfillmentReturnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateFulfillmentReturnResponse
	JSON400      *CreateFulfillmentReturnResponse
	JSON401      *CreateFulfillmentReturnResponse
	JSON403      *CreateFulfillmentReturnResponse
	JSON404      *CreateFulfillmentReturnResponse
	JSON429      *CreateFulfillmentReturnResponse
	JSON500      *CreateFulfillmentReturnResponse
	JSON503      *CreateFulfillmentReturnResponse
}

// Status returns HTTPResponse.Status
func (r CreateFulfillmentReturnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFulfillmentReturnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListReturnReasonCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListReturnReasonCodesResponse
	JSON400      *ListReturnReasonCodesResponse
	JSON401      *ListReturnReasonCodesResponse
	JSON403      *ListReturnReasonCodesResponse
	JSON404      *ListReturnReasonCodesResponse
	JSON429      *ListReturnReasonCodesResponse
	JSON500      *ListReturnReasonCodesResponse
	JSON503      *ListReturnReasonCodesResponse
}

// Status returns HTTPResponse.Status
func (r ListReturnReasonCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListReturnReasonCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackageTrackingDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPackageTrackingDetailsResponse
	JSON400      *GetPackageTrackingDetailsResponse
	JSON401      *GetPackageTrackingDetailsResponse
	JSON403      *GetPackageTrackingDetailsResponse
	JSON404      *GetPackageTrackingDetailsResponse
	JSON429      *GetPackageTrackingDetailsResponse
	JSON500      *GetPackageTrackingDetailsResponse
	JSON503      *GetPackageTrackingDetailsResponse
}

// Status returns HTTPResponse.Status
func (r GetPackageTrackingDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackageTrackingDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFeaturesWithResponse request returning *GetFeaturesResponse
func (c *ClientWithResponses) GetFeaturesWithResponse(ctx context.Context, params *GetFeaturesParams, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error) {
	rsp, err := c.GetFeatures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturesResponse(rsp)
}

// GetFeatureInventoryWithResponse request returning *GetFeatureInventoryResponse
func (c *ClientWithResponses) GetFeatureInventoryWithResponse(ctx context.Context, featureName string, params *GetFeatureInventoryParams, reqEditors ...RequestEditorFn) (*GetFeatureInventoryResponse, error) {
	rsp, err := c.GetFeatureInventory(ctx, featureName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureInventoryResponse(rsp)
}

// GetFeatureSKUWithResponse request returning *GetFeatureSKUResponse
func (c *ClientWithResponses) GetFeatureSKUWithResponse(ctx context.Context, featureName string, sellerSku string, params *GetFeatureSKUParams, reqEditors ...RequestEditorFn) (*GetFeatureSKUResponse, error) {
	rsp, err := c.GetFeatureSKU(ctx, featureName, sellerSku, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureSKUResponse(rsp)
}

// ListAllFulfillmentOrdersWithResponse request returning *ListAllFulfillmentOrdersResponse
func (c *ClientWithResponses) ListAllFulfillmentOrdersWithResponse(ctx context.Context, params *ListAllFulfillmentOrdersParams, reqEditors ...RequestEditorFn) (*ListAllFulfillmentOrdersResponse, error) {
	rsp, err := c.ListAllFulfillmentOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllFulfillmentOrdersResponse(rsp)
}

// CreateFulfillmentOrderWithBodyWithResponse request with arbitrary body returning *CreateFulfillmentOrderResponse
func (c *ClientWithResponses) CreateFulfillmentOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFulfillmentOrderResponse, error) {
	rsp, err := c.CreateFulfillmentOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFulfillmentOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateFulfillmentOrderWithResponse(ctx context.Context, body CreateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFulfillmentOrderResponse, error) {
	rsp, err := c.CreateFulfillmentOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFulfillmentOrderResponse(rsp)
}

// GetFulfillmentPreviewWithBodyWithResponse request with arbitrary body returning *GetFulfillmentPreviewResponse
func (c *ClientWithResponses) GetFulfillmentPreviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFulfillmentPreviewResponse, error) {
	rsp, err := c.GetFulfillmentPreviewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFulfillmentPreviewResponse(rsp)
}

func (c *ClientWithResponses) GetFulfillmentPreviewWithResponse(ctx context.Context, body GetFulfillmentPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFulfillmentPreviewResponse, error) {
	rsp, err := c.GetFulfillmentPreview(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFulfillmentPreviewResponse(rsp)
}

// GetFulfillmentOrderWithResponse request returning *GetFulfillmentOrderResponse
func (c *ClientWithResponses) GetFulfillmentOrderWithResponse(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*GetFulfillmentOrderResponse, error) {
	rsp, err := c.GetFulfillmentOrder(ctx, sellerFulfillmentOrderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFulfillmentOrderResponse(rsp)
}

// UpdateFulfillmentOrderWithBodyWithResponse request with arbitrary body returning *UpdateFulfillmentOrderResponse
func (c *ClientWithResponses) UpdateFulfillmentOrderWithBodyWithResponse(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFulfillmentOrderResponse, error) {
	rsp, err := c.UpdateFulfillmentOrderWithBody(ctx, sellerFulfillmentOrderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFulfillmentOrderResponse(rsp)
}

func (c *ClientWithResponses) UpdateFulfillmentOrderWithResponse(ctx context.Context, sellerFulfillmentOrderId string, body UpdateFulfillmentOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFulfillmentOrderResponse, error) {
	rsp, err := c.UpdateFulfillmentOrder(ctx, sellerFulfillmentOrderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFulfillmentOrderResponse(rsp)
}

// CancelFulfillmentOrderWithResponse request returning *CancelFulfillmentOrderResponse
func (c *ClientWithResponses) CancelFulfillmentOrderWithResponse(ctx context.Context, sellerFulfillmentOrderId string, reqEditors ...RequestEditorFn) (*CancelFulfillmentOrderResponse, error) {
	rsp, err := c.CancelFulfillmentOrder(ctx, sellerFulfillmentOrderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelFulfillmentOrderResponse(rsp)
}

// CreateFulfillmentReturnWithBodyWithResponse request with arbitrary body returning *CreateFulfillmentReturnResponse
func (c *ClientWithResponses) CreateFulfillmentReturnWithBodyWithResponse(ctx context.Context, sellerFulfillmentOrderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFulfillmentReturnResponse, error) {
	rsp, err := c.CreateFulfillmentReturnWithBody(ctx, sellerFulfillmentOrderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFulfillmentReturnResponse(rsp)
}

func (c *ClientWithResponses) CreateFulfillmentReturnWithResponse(ctx context.Context, sellerFulfillmentOrderId string, body CreateFulfillmentReturnJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFulfillmentReturnResponse, error) {
	rsp, err := c.CreateFulfillmentReturn(ctx, sellerFulfillmentOrderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFulfillmentReturnResponse(rsp)
}

// ListReturnReasonCodesWithResponse request returning *ListReturnReasonCodesResponse
func (c *ClientWithResponses) ListReturnReasonCodesWithResponse(ctx context.Context, params *ListReturnReasonCodesParams, reqEditors ...RequestEditorFn) (*ListReturnReasonCodesResponse, error) {
	rsp, err := c.ListReturnReasonCodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListReturnReasonCodesResponse(rsp)
}

// GetPackageTrackingDetailsWithResponse request returning *GetPackageTrackingDetailsResponse
func (c *ClientWithResponses) GetPackageTrackingDetailsWithResponse(ctx context.Context, params *GetPackageTrackingDetailsParams, reqEditors ...RequestEditorFn) (*GetPackageTrackingDetailsResponse, error) {
	rsp, err := c.GetPackageTrackingDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackageTrackingDetailsResponse(rsp)
}

// ParseGetFeaturesResponse parses an HTTP response from a GetFeaturesWithResponse call
func ParseGetFeaturesResponse(rsp *http.Response) (*GetFeaturesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetFeaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetFeatureInventoryResponse parses an HTTP response from a GetFeatureInventoryWithResponse call
func ParseGetFeatureInventoryResponse(rsp *http.Response) (*GetFeatureInventoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetFeatureInventoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetFeatureSKUResponse parses an HTTP response from a GetFeatureSKUWithResponse call
func ParseGetFeatureSKUResponse(rsp *http.Response) (*GetFeatureSKUResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureSKUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetFeatureSkuResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListAllFulfillmentOrdersResponse parses an HTTP response from a ListAllFulfillmentOrdersWithResponse call
func ParseListAllFulfillmentOrdersResponse(rsp *http.Response) (*ListAllFulfillmentOrdersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAllFulfillmentOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ListAllFulfillmentOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateFulfillmentOrderResponse parses an HTTP response from a CreateFulfillmentOrderWithResponse call
func ParseCreateFulfillmentOrderResponse(rsp *http.Response) (*CreateFulfillmentOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateFulfillmentOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetFulfillmentPreviewResponse parses an HTTP response from a GetFulfillmentPreviewWithResponse call
func ParseGetFulfillmentPreviewResponse(rsp *http.Response) (*GetFulfillmentPreviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFulfillmentPreviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetFulfillmentPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetFulfillmentOrderResponse parses an HTTP response from a GetFulfillmentOrderWithResponse call
func ParseGetFulfillmentOrderResponse(rsp *http.Response) (*GetFulfillmentOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFulfillmentOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateFulfillmentOrderResponse parses an HTTP response from a UpdateFulfillmentOrderWithResponse call
func ParseUpdateFulfillmentOrderResponse(rsp *http.Response) (*UpdateFulfillmentOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateFulfillmentOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest UpdateFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelFulfillmentOrderResponse parses an HTTP response from a CancelFulfillmentOrderWithResponse call
func ParseCancelFulfillmentOrderResponse(rsp *http.Response) (*CancelFulfillmentOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelFulfillmentOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelFulfillmentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateFulfillmentReturnResponse parses an HTTP response from a CreateFulfillmentReturnWithResponse call
func ParseCreateFulfillmentReturnResponse(rsp *http.Response) (*CreateFulfillmentReturnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateFulfillmentReturnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateFulfillmentReturnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListReturnReasonCodesResponse parses an HTTP response from a ListReturnReasonCodesWithResponse call
func ParseListReturnReasonCodesResponse(rsp *http.Response) (*ListReturnReasonCodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListReturnReasonCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ListReturnReasonCodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPackageTrackingDetailsResponse parses an HTTP response from a GetPackageTrackingDetailsWithResponse call
func ParseGetPackageTrackingDetailsResponse(rsp *http.Response) (*GetPackageTrackingDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPackageTrackingDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetPackageTrackingDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
