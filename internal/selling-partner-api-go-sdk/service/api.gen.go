// Package service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package service

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetServiceJobs request
	GetServiceJobs(ctx context.Context, params *GetServiceJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceJobByServiceJobId request
	GetServiceJobByServiceJobId(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAppointmentForServiceJobByServiceJobId request  with any body
	AddAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RescheduleAppointmentForServiceJobByServiceJobId request  with any body
	RescheduleAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RescheduleAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelServiceJobByServiceJobId request
	CancelServiceJobByServiceJobId(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteServiceJobByServiceJobId request
	CompleteServiceJobByServiceJobId(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetServiceJobs(ctx context.Context, params *GetServiceJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceJobByServiceJobId(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceJobByServiceJobIdRequest(c.Server, serviceJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody(c.Server, serviceJobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAppointmentForServiceJobByServiceJobIdRequest(c.Server, serviceJobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAppointmentForServiceJobByServiceJobIdWithBody(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody(c.Server, serviceJobId, appointmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAppointmentForServiceJobByServiceJobId(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAppointmentForServiceJobByServiceJobIdRequest(c.Server, serviceJobId, appointmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelServiceJobByServiceJobId(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelServiceJobByServiceJobIdRequest(c.Server, serviceJobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteServiceJobByServiceJobId(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteServiceJobByServiceJobIdRequest(c.Server, serviceJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetServiceJobsRequest generates requests for GetServiceJobs
func NewGetServiceJobsRequest(server string, params *GetServiceJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/v1/serviceJobs")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.ServiceOrderIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceOrderIds", runtime.ParamLocationQuery, *params.ServiceOrderIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ServiceJobStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceJobStatus", runtime.ParamLocationQuery, *params.ServiceJobStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastUpdatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastUpdatedAfter", runtime.ParamLocationQuery, *params.LastUpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastUpdatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastUpdatedBefore", runtime.ParamLocationQuery, *params.LastUpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScheduleStartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scheduleStartDate", runtime.ParamLocationQuery, *params.ScheduleStartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScheduleEndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scheduleEndDate", runtime.ParamLocationQuery, *params.ScheduleEndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marketplaceIds", runtime.ParamLocationQuery, params.MarketplaceIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceJobByServiceJobIdRequest generates requests for GetServiceJobByServiceJobId
func NewGetServiceJobByServiceJobIdRequest(server string, serviceJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceJobId", runtime.ParamLocationPath, serviceJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/v1/serviceJobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddAppointmentForServiceJobByServiceJobIdRequest calls the generic AddAppointmentForServiceJobByServiceJobId builder with application/json body
func NewAddAppointmentForServiceJobByServiceJobIdRequest(server string, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody(server, serviceJobId, "application/json", bodyReader)
}

// NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody generates requests for AddAppointmentForServiceJobByServiceJobId with any type of body
func NewAddAppointmentForServiceJobByServiceJobIdRequestWithBody(server string, serviceJobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceJobId", runtime.ParamLocationPath, serviceJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/v1/serviceJobs/%s/appointments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRescheduleAppointmentForServiceJobByServiceJobIdRequest calls the generic RescheduleAppointmentForServiceJobByServiceJobId builder with application/json body
func NewRescheduleAppointmentForServiceJobByServiceJobIdRequest(server string, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody(server, serviceJobId, appointmentId, "application/json", bodyReader)
}

// NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody generates requests for RescheduleAppointmentForServiceJobByServiceJobId with any type of body
func NewRescheduleAppointmentForServiceJobByServiceJobIdRequestWithBody(server string, serviceJobId string, appointmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceJobId", runtime.ParamLocationPath, serviceJobId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appointmentId", runtime.ParamLocationPath, appointmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/v1/serviceJobs/%s/appointments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelServiceJobByServiceJobIdRequest generates requests for CancelServiceJobByServiceJobId
func NewCancelServiceJobByServiceJobIdRequest(server string, serviceJobId string, params *CancelServiceJobByServiceJobIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceJobId", runtime.ParamLocationPath, serviceJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/v1/serviceJobs/%s/cancellations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cancellationReasonCode", runtime.ParamLocationQuery, params.CancellationReasonCode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompleteServiceJobByServiceJobIdRequest generates requests for CompleteServiceJobByServiceJobId
func NewCompleteServiceJobByServiceJobIdRequest(server string, serviceJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceJobId", runtime.ParamLocationPath, serviceJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service/v1/serviceJobs/%s/completions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetServiceJobs request
	GetServiceJobsWithResponse(ctx context.Context, params *GetServiceJobsParams, reqEditors ...RequestEditorFn) (*GetServiceJobsResponse, error)

	// GetServiceJobByServiceJobId request
	GetServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*GetServiceJobByServiceJobIdResponse, error)

	// AddAppointmentForServiceJobByServiceJobId request  with any body
	AddAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAppointmentForServiceJobByServiceJobIdResponse, error)

	AddAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAppointmentForServiceJobByServiceJobIdResponse, error)

	// RescheduleAppointmentForServiceJobByServiceJobId request  with any body
	RescheduleAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAppointmentForServiceJobByServiceJobIdResponse, error)

	RescheduleAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAppointmentForServiceJobByServiceJobIdResponse, error)

	// CancelServiceJobByServiceJobId request
	CancelServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams, reqEditors ...RequestEditorFn) (*CancelServiceJobByServiceJobIdResponse, error)

	// CompleteServiceJobByServiceJobId request
	CompleteServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*CompleteServiceJobByServiceJobIdResponse, error)
}

type GetServiceJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceJobsResponse
	JSON400      *GetServiceJobsResponse
	JSON403      *GetServiceJobsResponse
	JSON404      *GetServiceJobsResponse
	JSON413      *GetServiceJobsResponse
	JSON415      *GetServiceJobsResponse
	JSON429      *GetServiceJobsResponse
	JSON500      *GetServiceJobsResponse
	JSON503      *GetServiceJobsResponse
}

// Status returns HTTPResponse.Status
func (r GetServiceJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceJobByServiceJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceJobByServiceJobIdResponse
	JSON400      *GetServiceJobByServiceJobIdResponse
	JSON403      *GetServiceJobByServiceJobIdResponse
	JSON404      *GetServiceJobByServiceJobIdResponse
	JSON413      *GetServiceJobByServiceJobIdResponse
	JSON415      *GetServiceJobByServiceJobIdResponse
	JSON422      *GetServiceJobByServiceJobIdResponse
	JSON429      *GetServiceJobByServiceJobIdResponse
	JSON500      *GetServiceJobByServiceJobIdResponse
	JSON503      *GetServiceJobByServiceJobIdResponse
}

// Status returns HTTPResponse.Status
func (r GetServiceJobByServiceJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceJobByServiceJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAppointmentForServiceJobByServiceJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetAppointmentResponse
	JSON400      *SetAppointmentResponse
	JSON403      *SetAppointmentResponse
	JSON404      *SetAppointmentResponse
	JSON413      *SetAppointmentResponse
	JSON415      *SetAppointmentResponse
	JSON422      *SetAppointmentResponse
	JSON429      *SetAppointmentResponse
	JSON500      *SetAppointmentResponse
	JSON503      *SetAppointmentResponse
}

// Status returns HTTPResponse.Status
func (r AddAppointmentForServiceJobByServiceJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAppointmentForServiceJobByServiceJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RescheduleAppointmentForServiceJobByServiceJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetAppointmentResponse
	JSON400      *SetAppointmentResponse
	JSON403      *SetAppointmentResponse
	JSON404      *SetAppointmentResponse
	JSON413      *SetAppointmentResponse
	JSON415      *SetAppointmentResponse
	JSON422      *SetAppointmentResponse
	JSON429      *SetAppointmentResponse
	JSON500      *SetAppointmentResponse
	JSON503      *SetAppointmentResponse
}

// Status returns HTTPResponse.Status
func (r RescheduleAppointmentForServiceJobByServiceJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RescheduleAppointmentForServiceJobByServiceJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelServiceJobByServiceJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelServiceJobByServiceJobIdResponse
	JSON400      *CancelServiceJobByServiceJobIdResponse
	JSON403      *CancelServiceJobByServiceJobIdResponse
	JSON404      *CancelServiceJobByServiceJobIdResponse
	JSON413      *CancelServiceJobByServiceJobIdResponse
	JSON415      *CancelServiceJobByServiceJobIdResponse
	JSON422      *CancelServiceJobByServiceJobIdResponse
	JSON429      *CancelServiceJobByServiceJobIdResponse
	JSON500      *CancelServiceJobByServiceJobIdResponse
	JSON503      *CancelServiceJobByServiceJobIdResponse
}

// Status returns HTTPResponse.Status
func (r CancelServiceJobByServiceJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelServiceJobByServiceJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteServiceJobByServiceJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompleteServiceJobByServiceJobIdResponse
	JSON400      *CompleteServiceJobByServiceJobIdResponse
	JSON403      *CompleteServiceJobByServiceJobIdResponse
	JSON404      *CompleteServiceJobByServiceJobIdResponse
	JSON413      *CompleteServiceJobByServiceJobIdResponse
	JSON415      *CompleteServiceJobByServiceJobIdResponse
	JSON422      *CompleteServiceJobByServiceJobIdResponse
	JSON429      *CompleteServiceJobByServiceJobIdResponse
	JSON500      *CompleteServiceJobByServiceJobIdResponse
	JSON503      *CompleteServiceJobByServiceJobIdResponse
}

// Status returns HTTPResponse.Status
func (r CompleteServiceJobByServiceJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteServiceJobByServiceJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetServiceJobsWithResponse request returning *GetServiceJobsResponse
func (c *ClientWithResponses) GetServiceJobsWithResponse(ctx context.Context, params *GetServiceJobsParams, reqEditors ...RequestEditorFn) (*GetServiceJobsResponse, error) {
	rsp, err := c.GetServiceJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceJobsResponse(rsp)
}

// GetServiceJobByServiceJobIdWithResponse request returning *GetServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) GetServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*GetServiceJobByServiceJobIdResponse, error) {
	rsp, err := c.GetServiceJobByServiceJobId(ctx, serviceJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceJobByServiceJobIdResponse(rsp)
}

// AddAppointmentForServiceJobByServiceJobIdWithBodyWithResponse request with arbitrary body returning *AddAppointmentForServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) AddAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAppointmentForServiceJobByServiceJobIdResponse, error) {
	rsp, err := c.AddAppointmentForServiceJobByServiceJobIdWithBody(ctx, serviceJobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAppointmentForServiceJobByServiceJobIdResponse(rsp)
}

func (c *ClientWithResponses) AddAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, body AddAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAppointmentForServiceJobByServiceJobIdResponse, error) {
	rsp, err := c.AddAppointmentForServiceJobByServiceJobId(ctx, serviceJobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAppointmentForServiceJobByServiceJobIdResponse(rsp)
}

// RescheduleAppointmentForServiceJobByServiceJobIdWithBodyWithResponse request with arbitrary body returning *RescheduleAppointmentForServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) RescheduleAppointmentForServiceJobByServiceJobIdWithBodyWithResponse(ctx context.Context, serviceJobId string, appointmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAppointmentForServiceJobByServiceJobIdResponse, error) {
	rsp, err := c.RescheduleAppointmentForServiceJobByServiceJobIdWithBody(ctx, serviceJobId, appointmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentForServiceJobByServiceJobIdResponse(rsp)
}

func (c *ClientWithResponses) RescheduleAppointmentForServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, appointmentId string, body RescheduleAppointmentForServiceJobByServiceJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAppointmentForServiceJobByServiceJobIdResponse, error) {
	rsp, err := c.RescheduleAppointmentForServiceJobByServiceJobId(ctx, serviceJobId, appointmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAppointmentForServiceJobByServiceJobIdResponse(rsp)
}

// CancelServiceJobByServiceJobIdWithResponse request returning *CancelServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) CancelServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, params *CancelServiceJobByServiceJobIdParams, reqEditors ...RequestEditorFn) (*CancelServiceJobByServiceJobIdResponse, error) {
	rsp, err := c.CancelServiceJobByServiceJobId(ctx, serviceJobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelServiceJobByServiceJobIdResponse(rsp)
}

// CompleteServiceJobByServiceJobIdWithResponse request returning *CompleteServiceJobByServiceJobIdResponse
func (c *ClientWithResponses) CompleteServiceJobByServiceJobIdWithResponse(ctx context.Context, serviceJobId string, reqEditors ...RequestEditorFn) (*CompleteServiceJobByServiceJobIdResponse, error) {
	rsp, err := c.CompleteServiceJobByServiceJobId(ctx, serviceJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteServiceJobByServiceJobIdResponse(rsp)
}

// ParseGetServiceJobsResponse parses an HTTP response from a GetServiceJobsWithResponse call
func ParseGetServiceJobsResponse(rsp *http.Response) (*GetServiceJobsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetServiceJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServiceJobByServiceJobIdResponse parses an HTTP response from a GetServiceJobByServiceJobIdWithResponse call
func ParseGetServiceJobByServiceJobIdResponse(rsp *http.Response) (*GetServiceJobByServiceJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServiceJobByServiceJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseAddAppointmentForServiceJobByServiceJobIdResponse parses an HTTP response from a AddAppointmentForServiceJobByServiceJobIdWithResponse call
func ParseAddAppointmentForServiceJobByServiceJobIdResponse(rsp *http.Response) (*AddAppointmentForServiceJobByServiceJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddAppointmentForServiceJobByServiceJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRescheduleAppointmentForServiceJobByServiceJobIdResponse parses an HTTP response from a RescheduleAppointmentForServiceJobByServiceJobIdWithResponse call
func ParseRescheduleAppointmentForServiceJobByServiceJobIdResponse(rsp *http.Response) (*RescheduleAppointmentForServiceJobByServiceJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RescheduleAppointmentForServiceJobByServiceJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest SetAppointmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelServiceJobByServiceJobIdResponse parses an HTTP response from a CancelServiceJobByServiceJobIdWithResponse call
func ParseCancelServiceJobByServiceJobIdResponse(rsp *http.Response) (*CancelServiceJobByServiceJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelServiceJobByServiceJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCompleteServiceJobByServiceJobIdResponse parses an HTTP response from a CompleteServiceJobByServiceJobIdWithResponse call
func ParseCompleteServiceJobByServiceJobIdResponse(rsp *http.Response) (*CompleteServiceJobByServiceJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CompleteServiceJobByServiceJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CompleteServiceJobByServiceJobIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
