// Package updateInventory provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package updateInventory

// Error response returned when the request is unsuccessful.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// A list of error responses returned when a request is unsuccessful.
type ErrorList []Error

// InventoryUpdate defines model for InventoryUpdate.
type InventoryUpdate struct {

	// When true, this request contains a full feed. Otherwise, this request contains a partial feed. When sending a full feed, you must send information about all items in the warehouse. Any items not in the full feed are updated as not available. When sending a partial feed, only include the items that need an update to inventory. The status of other items will remain unchanged.
	IsFullUpdate bool `json:"isFullUpdate"`

	// A list of inventory items with updated details, including quantity available.
	Items        []ItemDetails       `json:"items"`
	SellingParty PartyIdentification `json:"sellingParty"`
}

// Updated inventory details for an item.
type ItemDetails struct {

	// Details of item quantity.
	AvailableQuantity ItemQuantity `json:"availableQuantity"`

	// The buyer selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
	BuyerProductIdentifier *string `json:"buyerProductIdentifier,omitempty"`

	// When true, the item is permanently unavailable.
	IsObsolete *bool `json:"isObsolete,omitempty"`

	// The vendor selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
	VendorProductIdentifier *string `json:"vendorProductIdentifier,omitempty"`
}

// Details of item quantity.
type ItemQuantity struct {

	// Quantity of units available for a specific item.
	Amount *int `json:"amount,omitempty"`

	// Unit of measure for the available quantity.
	UnitOfMeasure string `json:"unitOfMeasure"`
}

// PartyIdentification defines model for PartyIdentification.
type PartyIdentification struct {

	// Assigned identification for the party.
	PartyId string `json:"partyId"`
}

// The request body for the submitInventoryUpdate operation.
type SubmitInventoryUpdateRequest struct {
	Inventory *InventoryUpdate `json:"inventory,omitempty"`
}

// The response schema for the submitInventoryUpdate operation.
type SubmitInventoryUpdateResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList            `json:"errors,omitempty"`
	Payload *TransactionReference `json:"payload,omitempty"`
}

// TransactionReference defines model for TransactionReference.
type TransactionReference struct {

	// GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// SubmitInventoryUpdateJSONBody defines parameters for SubmitInventoryUpdate.
type SubmitInventoryUpdateJSONBody SubmitInventoryUpdateRequest

// SubmitInventoryUpdateJSONRequestBody defines body for SubmitInventoryUpdate for application/json ContentType.
type SubmitInventoryUpdateJSONRequestBody SubmitInventoryUpdateJSONBody
