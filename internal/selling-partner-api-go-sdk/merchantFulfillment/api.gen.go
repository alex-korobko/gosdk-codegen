// Package merchantFulfillment provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package merchantFulfillment

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdditionalSellerInputs request  with any body
	GetAdditionalSellerInputsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAdditionalSellerInputs(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEligibleShipmentServicesOld request  with any body
	GetEligibleShipmentServicesOldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetEligibleShipmentServicesOld(ctx context.Context, body GetEligibleShipmentServicesOldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEligibleShipmentServices request  with any body
	GetEligibleShipmentServicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetEligibleShipmentServices(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdditionalSellerInputsOld request  with any body
	GetAdditionalSellerInputsOldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAdditionalSellerInputsOld(ctx context.Context, body GetAdditionalSellerInputsOldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateShipment request  with any body
	CreateShipmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateShipment(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelShipment request
	CancelShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShipment request
	GetShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelShipmentOld request
	CancelShipmentOld(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdditionalSellerInputsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdditionalSellerInputsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdditionalSellerInputs(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdditionalSellerInputsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEligibleShipmentServicesOldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEligibleShipmentServicesOldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEligibleShipmentServicesOld(ctx context.Context, body GetEligibleShipmentServicesOldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEligibleShipmentServicesOldRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEligibleShipmentServicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEligibleShipmentServicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEligibleShipmentServices(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEligibleShipmentServicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdditionalSellerInputsOldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdditionalSellerInputsOldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdditionalSellerInputsOld(ctx context.Context, body GetAdditionalSellerInputsOldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdditionalSellerInputsOldRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShipment(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateShipmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelShipmentRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShipment(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShipmentRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelShipmentOld(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelShipmentOldRequest(c.Server, shipmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdditionalSellerInputsRequest calls the generic GetAdditionalSellerInputs builder with application/json body
func NewGetAdditionalSellerInputsRequest(server string, body GetAdditionalSellerInputsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAdditionalSellerInputsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAdditionalSellerInputsRequestWithBody generates requests for GetAdditionalSellerInputs with any type of body
func NewGetAdditionalSellerInputsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/additionalSellerInputs")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEligibleShipmentServicesOldRequest calls the generic GetEligibleShipmentServicesOld builder with application/json body
func NewGetEligibleShipmentServicesOldRequest(server string, body GetEligibleShipmentServicesOldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetEligibleShipmentServicesOldRequestWithBody(server, "application/json", bodyReader)
}

// NewGetEligibleShipmentServicesOldRequestWithBody generates requests for GetEligibleShipmentServicesOld with any type of body
func NewGetEligibleShipmentServicesOldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/eligibleServices")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEligibleShipmentServicesRequest calls the generic GetEligibleShipmentServices builder with application/json body
func NewGetEligibleShipmentServicesRequest(server string, body GetEligibleShipmentServicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetEligibleShipmentServicesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetEligibleShipmentServicesRequestWithBody generates requests for GetEligibleShipmentServices with any type of body
func NewGetEligibleShipmentServicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/eligibleShippingServices")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdditionalSellerInputsOldRequest calls the generic GetAdditionalSellerInputsOld builder with application/json body
func NewGetAdditionalSellerInputsOldRequest(server string, body GetAdditionalSellerInputsOldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAdditionalSellerInputsOldRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAdditionalSellerInputsOldRequestWithBody generates requests for GetAdditionalSellerInputsOld with any type of body
func NewGetAdditionalSellerInputsOldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/sellerInputs")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateShipmentRequest calls the generic CreateShipment builder with application/json body
func NewCreateShipmentRequest(server string, body CreateShipmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateShipmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateShipmentRequestWithBody generates requests for CreateShipment with any type of body
func NewCreateShipmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/shipments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelShipmentRequest generates requests for CancelShipment
func NewCancelShipmentRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/shipments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShipmentRequest generates requests for GetShipment
func NewGetShipmentRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/shipments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelShipmentOldRequest generates requests for CancelShipmentOld
func NewCancelShipmentOldRequest(server string, shipmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shipmentId", runtime.ParamLocationPath, shipmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mfn/v0/shipments/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdditionalSellerInputs request  with any body
	GetAdditionalSellerInputsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsResponse, error)

	GetAdditionalSellerInputsWithResponse(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsResponse, error)

	// GetEligibleShipmentServicesOld request  with any body
	GetEligibleShipmentServicesOldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesOldResponse, error)

	GetEligibleShipmentServicesOldWithResponse(ctx context.Context, body GetEligibleShipmentServicesOldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesOldResponse, error)

	// GetEligibleShipmentServices request  with any body
	GetEligibleShipmentServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesResponse, error)

	GetEligibleShipmentServicesWithResponse(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesResponse, error)

	// GetAdditionalSellerInputsOld request  with any body
	GetAdditionalSellerInputsOldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsOldResponse, error)

	GetAdditionalSellerInputsOldWithResponse(ctx context.Context, body GetAdditionalSellerInputsOldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsOldResponse, error)

	// CreateShipment request  with any body
	CreateShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShipmentResponse, error)

	CreateShipmentWithResponse(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateShipmentResponse, error)

	// CancelShipment request
	CancelShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*CancelShipmentResponse, error)

	// GetShipment request
	GetShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*GetShipmentResponse, error)

	// CancelShipmentOld request
	CancelShipmentOldWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*CancelShipmentOldResponse, error)
}

type GetAdditionalSellerInputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAdditionalSellerInputsResponse
	JSON400      *GetAdditionalSellerInputsResponse
	JSON401      *GetAdditionalSellerInputsResponse
	JSON403      *GetAdditionalSellerInputsResponse
	JSON404      *GetAdditionalSellerInputsResponse
	JSON429      *GetAdditionalSellerInputsResponse
	JSON500      *GetAdditionalSellerInputsResponse
	JSON503      *GetAdditionalSellerInputsResponse
}

// Status returns HTTPResponse.Status
func (r GetAdditionalSellerInputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdditionalSellerInputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEligibleShipmentServicesOldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEligibleShipmentServicesResponse
	JSON400      *GetEligibleShipmentServicesResponse
	JSON401      *GetEligibleShipmentServicesResponse
	JSON403      *GetEligibleShipmentServicesResponse
	JSON404      *GetEligibleShipmentServicesResponse
	JSON429      *GetEligibleShipmentServicesResponse
	JSON500      *GetEligibleShipmentServicesResponse
	JSON503      *GetEligibleShipmentServicesResponse
}

// Status returns HTTPResponse.Status
func (r GetEligibleShipmentServicesOldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEligibleShipmentServicesOldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEligibleShipmentServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEligibleShipmentServicesResponse
	JSON400      *GetEligibleShipmentServicesResponse
	JSON401      *GetEligibleShipmentServicesResponse
	JSON403      *GetEligibleShipmentServicesResponse
	JSON404      *GetEligibleShipmentServicesResponse
	JSON429      *GetEligibleShipmentServicesResponse
	JSON500      *GetEligibleShipmentServicesResponse
	JSON503      *GetEligibleShipmentServicesResponse
}

// Status returns HTTPResponse.Status
func (r GetEligibleShipmentServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEligibleShipmentServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdditionalSellerInputsOldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAdditionalSellerInputsResponse
	JSON400      *GetAdditionalSellerInputsResponse
	JSON401      *GetAdditionalSellerInputsResponse
	JSON403      *GetAdditionalSellerInputsResponse
	JSON404      *GetAdditionalSellerInputsResponse
	JSON429      *GetAdditionalSellerInputsResponse
	JSON500      *GetAdditionalSellerInputsResponse
	JSON503      *GetAdditionalSellerInputsResponse
}

// Status returns HTTPResponse.Status
func (r GetAdditionalSellerInputsOldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdditionalSellerInputsOldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateShipmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateShipmentResponse
	JSON400      *CreateShipmentResponse
	JSON401      *CreateShipmentResponse
	JSON403      *CreateShipmentResponse
	JSON404      *CreateShipmentResponse
	JSON429      *CreateShipmentResponse
	JSON500      *CreateShipmentResponse
	JSON503      *CreateShipmentResponse
}

// Status returns HTTPResponse.Status
func (r CreateShipmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateShipmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelShipmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelShipmentResponse
	JSON400      *CancelShipmentResponse
	JSON401      *CancelShipmentResponse
	JSON403      *CancelShipmentResponse
	JSON404      *CancelShipmentResponse
	JSON429      *CancelShipmentResponse
	JSON500      *CancelShipmentResponse
	JSON503      *CancelShipmentResponse
}

// Status returns HTTPResponse.Status
func (r CancelShipmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelShipmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShipmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetShipmentResponse
	JSON400      *GetShipmentResponse
	JSON401      *GetShipmentResponse
	JSON403      *GetShipmentResponse
	JSON404      *GetShipmentResponse
	JSON429      *GetShipmentResponse
	JSON500      *GetShipmentResponse
	JSON503      *GetShipmentResponse
}

// Status returns HTTPResponse.Status
func (r GetShipmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShipmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelShipmentOldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelShipmentResponse
	JSON400      *CancelShipmentResponse
	JSON401      *CancelShipmentResponse
	JSON403      *CancelShipmentResponse
	JSON404      *CancelShipmentResponse
	JSON429      *CancelShipmentResponse
	JSON500      *CancelShipmentResponse
	JSON503      *CancelShipmentResponse
}

// Status returns HTTPResponse.Status
func (r CancelShipmentOldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelShipmentOldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdditionalSellerInputsWithBodyWithResponse request with arbitrary body returning *GetAdditionalSellerInputsResponse
func (c *ClientWithResponses) GetAdditionalSellerInputsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsResponse, error) {
	rsp, err := c.GetAdditionalSellerInputsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdditionalSellerInputsResponse(rsp)
}

func (c *ClientWithResponses) GetAdditionalSellerInputsWithResponse(ctx context.Context, body GetAdditionalSellerInputsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsResponse, error) {
	rsp, err := c.GetAdditionalSellerInputs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdditionalSellerInputsResponse(rsp)
}

// GetEligibleShipmentServicesOldWithBodyWithResponse request with arbitrary body returning *GetEligibleShipmentServicesOldResponse
func (c *ClientWithResponses) GetEligibleShipmentServicesOldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesOldResponse, error) {
	rsp, err := c.GetEligibleShipmentServicesOldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEligibleShipmentServicesOldResponse(rsp)
}

func (c *ClientWithResponses) GetEligibleShipmentServicesOldWithResponse(ctx context.Context, body GetEligibleShipmentServicesOldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesOldResponse, error) {
	rsp, err := c.GetEligibleShipmentServicesOld(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEligibleShipmentServicesOldResponse(rsp)
}

// GetEligibleShipmentServicesWithBodyWithResponse request with arbitrary body returning *GetEligibleShipmentServicesResponse
func (c *ClientWithResponses) GetEligibleShipmentServicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesResponse, error) {
	rsp, err := c.GetEligibleShipmentServicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEligibleShipmentServicesResponse(rsp)
}

func (c *ClientWithResponses) GetEligibleShipmentServicesWithResponse(ctx context.Context, body GetEligibleShipmentServicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEligibleShipmentServicesResponse, error) {
	rsp, err := c.GetEligibleShipmentServices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEligibleShipmentServicesResponse(rsp)
}

// GetAdditionalSellerInputsOldWithBodyWithResponse request with arbitrary body returning *GetAdditionalSellerInputsOldResponse
func (c *ClientWithResponses) GetAdditionalSellerInputsOldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsOldResponse, error) {
	rsp, err := c.GetAdditionalSellerInputsOldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdditionalSellerInputsOldResponse(rsp)
}

func (c *ClientWithResponses) GetAdditionalSellerInputsOldWithResponse(ctx context.Context, body GetAdditionalSellerInputsOldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAdditionalSellerInputsOldResponse, error) {
	rsp, err := c.GetAdditionalSellerInputsOld(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdditionalSellerInputsOldResponse(rsp)
}

// CreateShipmentWithBodyWithResponse request with arbitrary body returning *CreateShipmentResponse
func (c *ClientWithResponses) CreateShipmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateShipmentResponse, error) {
	rsp, err := c.CreateShipmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipmentResponse(rsp)
}

func (c *ClientWithResponses) CreateShipmentWithResponse(ctx context.Context, body CreateShipmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateShipmentResponse, error) {
	rsp, err := c.CreateShipment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateShipmentResponse(rsp)
}

// CancelShipmentWithResponse request returning *CancelShipmentResponse
func (c *ClientWithResponses) CancelShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*CancelShipmentResponse, error) {
	rsp, err := c.CancelShipment(ctx, shipmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelShipmentResponse(rsp)
}

// GetShipmentWithResponse request returning *GetShipmentResponse
func (c *ClientWithResponses) GetShipmentWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*GetShipmentResponse, error) {
	rsp, err := c.GetShipment(ctx, shipmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShipmentResponse(rsp)
}

// CancelShipmentOldWithResponse request returning *CancelShipmentOldResponse
func (c *ClientWithResponses) CancelShipmentOldWithResponse(ctx context.Context, shipmentId string, reqEditors ...RequestEditorFn) (*CancelShipmentOldResponse, error) {
	rsp, err := c.CancelShipmentOld(ctx, shipmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelShipmentOldResponse(rsp)
}

// ParseGetAdditionalSellerInputsResponse parses an HTTP response from a GetAdditionalSellerInputsWithResponse call
func ParseGetAdditionalSellerInputsResponse(rsp *http.Response) (*GetAdditionalSellerInputsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAdditionalSellerInputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetEligibleShipmentServicesOldResponse parses an HTTP response from a GetEligibleShipmentServicesOldWithResponse call
func ParseGetEligibleShipmentServicesOldResponse(rsp *http.Response) (*GetEligibleShipmentServicesOldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEligibleShipmentServicesOldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetEligibleShipmentServicesResponse parses an HTTP response from a GetEligibleShipmentServicesWithResponse call
func ParseGetEligibleShipmentServicesResponse(rsp *http.Response) (*GetEligibleShipmentServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEligibleShipmentServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetEligibleShipmentServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetAdditionalSellerInputsOldResponse parses an HTTP response from a GetAdditionalSellerInputsOldWithResponse call
func ParseGetAdditionalSellerInputsOldResponse(rsp *http.Response) (*GetAdditionalSellerInputsOldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAdditionalSellerInputsOldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetAdditionalSellerInputsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateShipmentResponse parses an HTTP response from a CreateShipmentWithResponse call
func ParseCreateShipmentResponse(rsp *http.Response) (*CreateShipmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateShipmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CreateShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelShipmentResponse parses an HTTP response from a CancelShipmentWithResponse call
func ParseCancelShipmentResponse(rsp *http.Response) (*CancelShipmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelShipmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetShipmentResponse parses an HTTP response from a GetShipmentWithResponse call
func ParseGetShipmentResponse(rsp *http.Response) (*GetShipmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetShipmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCancelShipmentOldResponse parses an HTTP response from a CancelShipmentOldWithResponse call
func ParseCancelShipmentOldResponse(rsp *http.Response) (*CancelShipmentOldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelShipmentOldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest CancelShipmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
