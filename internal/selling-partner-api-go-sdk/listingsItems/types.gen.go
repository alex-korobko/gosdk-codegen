// Package listingsItems provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package listingsItems

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Defines values for IssueSeverity.
const (
	IssueSeverityERROR IssueSeverity = "ERROR"

	IssueSeverityINFO IssueSeverity = "INFO"

	IssueSeverityWARNING IssueSeverity = "WARNING"
)

// Defines values for ListingsItemPutRequestRequirements.
const (
	ListingsItemPutRequestRequirementsLISTING ListingsItemPutRequestRequirements = "LISTING"

	ListingsItemPutRequestRequirementsLISTINGOFFERONLY ListingsItemPutRequestRequirements = "LISTING_OFFER_ONLY"

	ListingsItemPutRequestRequirementsLISTINGPRODUCTONLY ListingsItemPutRequestRequirements = "LISTING_PRODUCT_ONLY"
)

// Defines values for ListingsItemSubmissionResponseStatus.
const (
	ListingsItemSubmissionResponseStatusACCEPTED ListingsItemSubmissionResponseStatus = "ACCEPTED"

	ListingsItemSubmissionResponseStatusINVALID ListingsItemSubmissionResponseStatus = "INVALID"
)

// Defines values for PatchOperationOp.
const (
	PatchOperationOpAdd PatchOperationOp = "add"

	PatchOperationOpDelete PatchOperationOp = "delete"

	PatchOperationOpReplace PatchOperationOp = "replace"
)

// Error response returned when the request is unsuccessful.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// A list of error responses returned when a request is unsuccessful.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// An issue with a listings item.
type Issue struct {

	// Name of the attribute associated with the issue, if applicable.
	AttributeName *string `json:"attributeName,omitempty"`

	// An issue code that identifies the type of issue.
	Code string `json:"code"`

	// A message that describes the issue.
	Message string `json:"message"`

	// The severity of the issue.
	Severity IssueSeverity `json:"severity"`
}

// The severity of the issue.
type IssueSeverity string

// The request body schema for the patchListingsItem operation.
type ListingsItemPatchRequest struct {

	// One or more JSON Patch operations to perform on the listings item.
	Patches []PatchOperation `json:"patches"`

	// The Amazon product type of the listings item.
	ProductType string `json:"productType"`
}

// The request body schema for the putListingsItem operation.
type ListingsItemPutRequest struct {

	// JSON object containing structured listings item attribute data keyed by attribute name.
	Attributes ListingsItemPutRequest_Attributes `json:"attributes"`

	// The Amazon product type of the listings item.
	ProductType string `json:"productType"`

	// The name of the requirements set for the provided data.
	Requirements *ListingsItemPutRequestRequirements `json:"requirements,omitempty"`
}

// JSON object containing structured listings item attribute data keyed by attribute name.
type ListingsItemPutRequest_Attributes struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// The name of the requirements set for the provided data.
type ListingsItemPutRequestRequirements string

// Response containing the results of a submission to the Selling Partner API for Listings Items.
type ListingsItemSubmissionResponse struct {

	// Listings item issues related to the listings item submission.
	Issues *[]Issue `json:"issues,omitempty"`

	// A selling partner provided identifier for an Amazon listing.
	Sku string `json:"sku"`

	// The status of the listings item submission.
	Status ListingsItemSubmissionResponseStatus `json:"status"`

	// The unique identifier of the listings item submission.
	SubmissionId string `json:"submissionId"`
}

// The status of the listings item submission.
type ListingsItemSubmissionResponseStatus string

// Individual JSON Patch operation for an HTTP PATCH request.
type PatchOperation struct {

	// Type of JSON Patch operation. Supported JSON Patch operations include add, replace, and delete. See <https://tools.ietf.org/html/rfc6902>.
	Op PatchOperationOp `json:"op"`

	// JSON Pointer path of the element to patch. See <https://tools.ietf.org/html/rfc6902>.
	Path string `json:"path"`

	// JSON value to add, replace, or delete.
	Value *[]struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	} `json:"value,omitempty"`
}

// Type of JSON Patch operation. Supported JSON Patch operations include add, replace, and delete. See <https://tools.ietf.org/html/rfc6902>.
type PatchOperationOp string

// DeleteListingsItemParams defines parameters for DeleteListingsItem.
type DeleteListingsItemParams struct {

	// A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `json:"marketplaceIds"`

	// A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
	IssueLocale *string `json:"issueLocale,omitempty"`
}

// PatchListingsItemJSONBody defines parameters for PatchListingsItem.
type PatchListingsItemJSONBody ListingsItemPatchRequest

// PatchListingsItemParams defines parameters for PatchListingsItem.
type PatchListingsItemParams struct {

	// A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `json:"marketplaceIds"`

	// A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
	IssueLocale *string `json:"issueLocale,omitempty"`
}

// PutListingsItemJSONBody defines parameters for PutListingsItem.
type PutListingsItemJSONBody ListingsItemPutRequest

// PutListingsItemParams defines parameters for PutListingsItem.
type PutListingsItemParams struct {

	// A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `json:"marketplaceIds"`

	// A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
	IssueLocale *string `json:"issueLocale,omitempty"`
}

// PatchListingsItemJSONRequestBody defines body for PatchListingsItem for application/json ContentType.
type PatchListingsItemJSONRequestBody PatchListingsItemJSONBody

// PutListingsItemJSONRequestBody defines body for PutListingsItem for application/json ContentType.
type PutListingsItemJSONRequestBody PutListingsItemJSONBody

// Getter for additional properties for ListingsItemPutRequest_Attributes. Returns the specified
// element and whether it was found
func (a ListingsItemPutRequest_Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ListingsItemPutRequest_Attributes
func (a *ListingsItemPutRequest_Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ListingsItemPutRequest_Attributes to handle AdditionalProperties
func (a *ListingsItemPutRequest_Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ListingsItemPutRequest_Attributes to handle AdditionalProperties
func (a ListingsItemPutRequest_Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
