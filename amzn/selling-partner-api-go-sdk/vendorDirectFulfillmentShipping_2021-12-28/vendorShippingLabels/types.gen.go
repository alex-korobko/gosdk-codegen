// Package vendorShippingLabels provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package vendorShippingLabels

import (
	"time"
)

// Address defines model for Address.
type Address struct {

	// First line of the address.
	AddressLine1 string `json:"addressLine1"`

	// Additional street address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// Additional street address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// The city where the person, business or institution is located.
	City *string `json:"city,omitempty"`

	// The two digit country code in ISO 3166-1 alpha-2 format.
	CountryCode string `json:"countryCode"`

	// The county where person, business or institution is located.
	County *string `json:"county,omitempty"`

	// The district where person, business or institution is located.
	District *string `json:"district,omitempty"`

	// The name of the person, business or institution at that address.
	Name string `json:"name"`

	// The phone number of the person, business or institution located at that address.
	Phone *string `json:"phone,omitempty"`

	// The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode *string `json:"postalCode,omitempty"`

	// The state or region where person, business or institution is located.
	StateOrRegion *string `json:"stateOrRegion,omitempty"`
}

// Container defines model for Container.
type Container struct {

	// Carrier required for EU VOC vendors only.
	Carrier *string `json:"carrier,omitempty"`

	// The container identifier.
	ContainerIdentifier string `json:"containerIdentifier"`

	// An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
	ContainerSequenceNumber *int `json:"containerSequenceNumber,omitempty"`

	// The type of container.
	ContainerType string `json:"containerType"`

	// Physical dimensional measurements of a container.
	Dimensions *Dimensions `json:"dimensions,omitempty"`

	// The date of the manifest.
	ManifestDate *string `json:"manifestDate,omitempty"`

	// The manifest identifier.
	ManifestId *string `json:"manifestId,omitempty"`

	// A list of packed items.
	PackedItems []PackedItem `json:"packedItems"`

	// SCAC code required for NA VOC vendors only.
	ScacCode *string `json:"scacCode,omitempty"`

	// The shipment method.
	ShipMethod *string `json:"shipMethod,omitempty"`

	// The tracking number.
	TrackingNumber *string `json:"trackingNumber,omitempty"`

	// The weight.
	Weight *Weight `json:"weight,omitempty"`
}

// CustomerInvoice defines model for CustomerInvoice.
type CustomerInvoice struct {

	// The Base64encoded customer invoice.
	Content string `json:"content"`

	// The purchase order number for this order.
	PurchaseOrderNumber string `json:"purchaseOrderNumber"`
}

// CustomerInvoiceList defines model for CustomerInvoiceList.
type CustomerInvoiceList struct {
	CustomerInvoices *[]CustomerInvoice `json:"customerInvoices,omitempty"`
	Pagination       *Pagination        `json:"pagination,omitempty"`
}

// Decimal defines model for Decimal.
type Decimal string

// Dimensions defines model for Dimensions.
type Dimensions struct {

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
	Height Decimal `json:"height"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
	Length Decimal `json:"length"`

	// The unit of measure for dimensions.
	UnitOfMeasure string `json:"unitOfMeasure"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
	Width Decimal `json:"width"`
}

// Error defines model for Error.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// GetCustomerInvoiceResponse defines model for GetCustomerInvoiceResponse.
type GetCustomerInvoiceResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList       `json:"errors,omitempty"`
	Payload *CustomerInvoice `json:"payload,omitempty"`
}

// GetCustomerInvoicesResponse defines model for GetCustomerInvoicesResponse.
type GetCustomerInvoicesResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList           `json:"errors,omitempty"`
	Payload *CustomerInvoiceList `json:"payload,omitempty"`
}

// GetShippingLabelListResponse defines model for GetShippingLabelListResponse.
type GetShippingLabelListResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList         `json:"errors,omitempty"`
	Payload *ShippingLabelList `json:"payload,omitempty"`
}

// GetShippingLabelResponse defines model for GetShippingLabelResponse.
type GetShippingLabelResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList     `json:"errors,omitempty"`
	Payload *ShippingLabel `json:"payload,omitempty"`
}

// Item defines model for Item.
type Item struct {

	// Buyer's Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.
	BuyerProductIdentifier *string `json:"buyerProductIdentifier,omitempty"`

	// Item Sequence Number for the item. This must be the same value as sent in order for a given item.
	ItemSequenceNumber int `json:"itemSequenceNumber"`

	// Details of item quantity.
	ShippedQuantity ItemQuantity `json:"shippedQuantity"`

	// The vendor selected product identification of the item. Should be the same as was sent in the purchase order, like SKU Number.
	VendorProductIdentifier *string `json:"vendorProductIdentifier,omitempty"`
}

// ItemQuantity defines model for ItemQuantity.
type ItemQuantity struct {

	// Quantity of units shipped for a specific item at a shipment level. If the item is present only in certain packages or pallets within the shipment, please provide this at the appropriate package or pallet level.
	Amount int `json:"amount"`

	// Unit of measure for the shipped quantity.
	UnitOfMeasure string `json:"unitOfMeasure"`
}

// LabelData defines model for LabelData.
type LabelData struct {

	// This field will contain the Base64encoded string of the shipment label content.
	Content string `json:"content"`

	// Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
	PackageIdentifier *string `json:"packageIdentifier,omitempty"`

	// Ship method to be used for shipping the order. Amazon defines Ship Method Codes indicating shipping carrier and shipment service level. Ship Method Codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the Ship Method Codes are vendor specific and will be provided to each vendor during the implementation.
	ShipMethod *string `json:"shipMethod,omitempty"`

	// Shipping method name for internal reference.
	ShipMethodName *string `json:"shipMethodName,omitempty"`

	// Package tracking identifier from the shipping carrier.
	TrackingNumber *string `json:"trackingNumber,omitempty"`
}

// PackedItem defines model for PackedItem.
type PackedItem struct {

	// Buyer's Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.
	BuyerProductIdentifier *string `json:"buyerProductIdentifier,omitempty"`

	// Item Sequence Number for the item. This must be the same value as sent in the order for a given item.
	ItemSequenceNumber int `json:"itemSequenceNumber"`

	// Details of item quantity.
	PackedQuantity ItemQuantity `json:"packedQuantity"`

	// The vendor selected product identification of the item. Should be the same as was sent in the Purchase Order, like SKU Number.
	VendorProductIdentifier *string `json:"vendorProductIdentifier,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {

	// A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more order items to return.
	NextToken *string `json:"nextToken,omitempty"`
}

// PartyIdentification defines model for PartyIdentification.
type PartyIdentification struct {

	// Address of the party.
	Address *Address `json:"address,omitempty"`

	// Assigned Identification for the party.
	PartyId string `json:"partyId"`

	// Tax registration details of the entity.
	TaxRegistrationDetails *[]TaxRegistrationDetails `json:"taxRegistrationDetails,omitempty"`
}

// ShippingLabel defines model for ShippingLabel.
type ShippingLabel struct {

	// Provides the details of the packages in this shipment.
	LabelData []LabelData `json:"labelData"`

	// Format of the label.
	LabelFormat string `json:"labelFormat"`

	// This field will contain the Purchase Order Number for this order.
	PurchaseOrderNumber string              `json:"purchaseOrderNumber"`
	SellingParty        PartyIdentification `json:"sellingParty"`
	ShipFromParty       PartyIdentification `json:"shipFromParty"`
}

// ShippingLabelList defines model for ShippingLabelList.
type ShippingLabelList struct {
	Pagination     *Pagination      `json:"pagination,omitempty"`
	ShippingLabels *[]ShippingLabel `json:"shippingLabels,omitempty"`
}

// ShippingLabelRequest defines model for ShippingLabelRequest.
type ShippingLabelRequest struct {

	// A list of the packages in this shipment.
	Containers *[]Container `json:"containers,omitempty"`

	// Purchase order number of the order for which to create a shipping label.
	PurchaseOrderNumber string              `json:"purchaseOrderNumber"`
	SellingParty        PartyIdentification `json:"sellingParty"`
	ShipFromParty       PartyIdentification `json:"shipFromParty"`
}

// SubmitShippingLabelsRequest defines model for SubmitShippingLabelsRequest.
type SubmitShippingLabelsRequest struct {
	ShippingLabelRequests *[]ShippingLabelRequest `json:"shippingLabelRequests,omitempty"`
}

// SubmitShippingLabelsResponse defines model for SubmitShippingLabelsResponse.
type SubmitShippingLabelsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList            `json:"errors,omitempty"`
	Payload *TransactionReference `json:"payload,omitempty"`
}

// TaxRegistrationDetails defines model for TaxRegistrationDetails.
type TaxRegistrationDetails struct {

	// Address of the party.
	TaxRegistrationAddress *Address `json:"taxRegistrationAddress,omitempty"`

	// Tax registration message that can be used for additional tax related details.
	TaxRegistrationMessages *string `json:"taxRegistrationMessages,omitempty"`

	// Tax registration number for the party. For example, VAT ID.
	TaxRegistrationNumber string `json:"taxRegistrationNumber"`

	// Tax registration type for the entity.
	TaxRegistrationType *string `json:"taxRegistrationType,omitempty"`
}

// TransactionReference defines model for TransactionReference.
type TransactionReference struct {

	// GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// Weight defines model for Weight.
type Weight struct {

	// The unit of measurement.
	UnitOfMeasure string `json:"unitOfMeasure"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
	Value Decimal `json:"value"`
}

// GetShippingLabelsParams defines parameters for GetShippingLabels.
type GetShippingLabelsParams struct {

	// The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
	ShipFromPartyId *string `json:"shipFromPartyId,omitempty"`

	// The limit to the number of records returned.
	Limit *int `json:"limit,omitempty"`

	// Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
	CreatedAfter time.Time `json:"createdAfter"`

	// Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
	CreatedBefore time.Time `json:"createdBefore"`

	// Sort ASC or DESC by order creation date.
	SortOrder *string `json:"sortOrder,omitempty"`

	// Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
	NextToken *string `json:"nextToken,omitempty"`
}

// SubmitShippingLabelRequestJSONBody defines parameters for SubmitShippingLabelRequest.
type SubmitShippingLabelRequestJSONBody SubmitShippingLabelsRequest

// SubmitShippingLabelRequestRequestBody defines body for SubmitShippingLabelRequest for application/json ContentType.
type SubmitShippingLabelRequestJSONRequestBody SubmitShippingLabelRequestJSONBody
